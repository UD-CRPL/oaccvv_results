var jsonResults = {
    "configs": [
        {
            "CC": "/global/homes/v/vaidhy/llvm-project/build/bin/clang",
            "CCFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda",
                "--libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src",
                "-isystem",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src",
                "-isystem",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src"
            ],
            "CC_ACC_Version": "2.7",
            "CPP": "/global/homes/v/vaidhy/llvm-project/build/bin/clang++",
            "CPPFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda",
                "--libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget",
                "-L",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src",
                "-isystem",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src",
                "-isystem",
                "/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src"
            ],
            "CPP_ACC_Version": "2.7",
            "FC": "",
            "FCFlags": [],
            "FC_ACC_Version": null,
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/v/vaidhy/RunInfra/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n13 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n13 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e947ba.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e947ba.o: in function `test2':\nacc_async_test.c:(.text+0x12cf): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e947ba.o: in function `test3':\nacc_async_test.c:(.text+0x17e2): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1e67): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5664022649871185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-47b068.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-47b068.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4673580640228465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-1a6b4c.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-1a6b4c.o: in function `test3':\nacc_async_test.c:(.text+0xc52): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x12d7): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5170121509872843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-f4584e.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-f4584e.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5177966250048485
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n9 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n9 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-4bcc9b.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-4bcc9b.o: in function `test2':\nacc_async_test.c:(.text+0x12cf): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5174647560052108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-a36c26.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-a36c26.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5167787859973032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:38:13: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n    while (!acc_async_test(1));\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n10 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-91f8ca.o: in function `test1':\nacc_async_test.c:(.text+0x79c): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-91f8ca.o: in function `test3':\nacc_async_test.c:(.text+0xc52): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x12d7): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5678169550083112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test.c/acc_async_test.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:68:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:75:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:82:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(1));\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:103:21: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int async_val = acc_get_default_async();\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:114:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:121:62: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n                                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test.c:128:17: warning: implicit declaration of function 'acc_async_test' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test(async_val));\n                ^\n7 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e9a51d.o: in function `test2':\nacc_async_test.c:(.text+0x6ff): undefined reference to `acc_async_test'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_async_test-e9a51d.o: in function `test3':\nacc_async_test.c:(.text+0xc12): undefined reference to `acc_get_default_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_async_test.c:(.text+0x1297): undefined reference to `acc_async_test'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.517450640007155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n12 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06587516900617629
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06605469400528818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n9 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06726677599363029
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06502598398947157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n8 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06511722499271855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06669776397757232
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:35: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                  ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:49: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:63: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:77: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:27:91: error: array section does not specify contiguous storage\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n                                                                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:29:74: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n                                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:30:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:37:77: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n                                                                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:44:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(e[x:1][0:n]) async(x)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:47:12: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n    while(!acc_async_test_all());\n           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n9 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0658917099935934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:94:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:101:75: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:109:16: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while(!acc_async_test_all());\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:156:13: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_set_default_async(x);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:84: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:172:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:29: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:43: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                          ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:57: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                        ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:79: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                              ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:153:93: error: array section does not specify contiguous storage\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n                                                                                            ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:157:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n                                                                     ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:42: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                         ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:56: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                       ^~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_async_test_all.c:164:70: error: array section does not specify contiguous storage\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n                                                                     ^~~~~~~\n7 warnings and 11 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06617116200504825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36558749599498697
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16591496800538152,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165605880029034
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169703510007821,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4669046979979612
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172344050195534,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4672281520033721
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7683860069955699,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164047480211593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7678507580130827,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164367770194076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7673887350247242,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5157953099987935
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165471029875334,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46698817500146106
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173835129942745,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin.c/acc_copyin.c8 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5669308110082056
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670378100010566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658046899945475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16637974500190467,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:20:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:24:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) wait(1)\n                             ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:20:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:24:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) wait(1)\n                             ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyin_async-d130bb.o: in function `test1':\nacc_copyin_async.c:(.text+0x13c): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x157): undefined reference to `acc_copyin_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5166527310211677
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:74:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:79:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:74:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:79:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyin_async-8b18a3.o: in function `test2':\nacc_copyin_async.c:(.text+0x11d): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x138): undefined reference to `acc_copyin_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyin_async.c:(.text+0x1ad): undefined reference to `acc_async_test_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46675630201934837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:116:5: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:121:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06593075298587792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:165:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:172:9: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyin_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:173:46: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n        #pragma acc exit data delete(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:174:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:182:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait\n                ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06584261800162494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:226:9: warning: implicit declaration of function 'acc_copyin_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyin_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c:236:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06615030200919136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664132769918069
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16574445998412557,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168121680035256
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171258319867775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36648614300065674
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16548244099249132,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) present(c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2) present(f[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:41:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:43:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0659490870020818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:67:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:79:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:86:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:87:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06528437699307688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:108:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:110:5: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_set_default_async(def_async_var + 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:121:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:128:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:129:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06661907801753841
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:160:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:168:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:169:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n3 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:160:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:168:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c:169:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n3 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyout_async-86ae85.o: in function `test4':\nacc_copyout_async.c:(.text+0x47f): undefined reference to `acc_copyout_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_copyout_async.c:(.text+0x69a): undefined reference to `acc_copyout_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5172520990017802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36665363499196246
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16629981598816812,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516415557009168
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7674457710236311,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661866649927106
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16695511800935492,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:42:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:44:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536301301093772
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:68:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:88:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), def_async_var);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:89:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655415570072364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:110:25: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int def_async_var = acc_get_default_async();\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:112:5: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_set_default_async(def_async_var + 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:124:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:131:9: warning: implicit declaration of function 'acc_copyout_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:132:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520466800429858
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:164:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:171:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:172:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:173:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:164:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:171:9: warning: implicit declaration of function 'acc_copyout_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:172:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c:173:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_copyout_finalize_async-cc4fb3.o: in function `test4':\nacc_copyout_finalize_async.c:(.text+0x479): undefined reference to `acc_copyout_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4661761689931154
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31630826901528053
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1666696060274262,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36549047398148105
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11530655997921713,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163709839980584
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6684306849783752,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161231620004401
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163609249982983,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170872410235461
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6670591449947096,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46712650297558866
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7189325439976528,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5173596790118609
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6672485980088823,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create.c/acc_create.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.51613671699306
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7175679570063949,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36598494701320305
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16629463600111194,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:25:9: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_create_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:29:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:36:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:43:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600648397579789
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:77:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:81:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:77:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:81:17: warning: implicit declaration of function 'acc_async_test_all' is invalid in C99 [-Wimplicit-function-declaration]\n        while (!acc_async_test_all());\n                ^\n2 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_create_async-e0406c.o: in function `test2':\nacc_create_async.c:(.text+0xf0): undefined reference to `acc_create_async'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: acc_create_async.c:(.text+0x18c): undefined reference to `acc_async_test_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46694436299731024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:118:5: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_create_async(c, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:122:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11618824099423364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:166:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:173:9: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_create_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:174:46: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n        #pragma acc exit data delete(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:175:46: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel present(c[0:n]) async(1)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:183:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait\n                ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06548109700088389
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:223:50: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:n]) async(1)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:230:13: warning: implicit declaration of function 'acc_create_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_create_async(c, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:231:50: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel present(c[0:n]) async(1)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:238:51: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n            #pragma acc exit data copyout(c[0:n]) async(1)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c:239:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06580667500384152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_create_async.c/acc_create_async.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669747429958079
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16615505298250355,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161609569913708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675347840122413,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:41:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n7 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06479484599549323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_async-a82c0f.o: in function `test2':\nacc_delete_async.c:(.text+0x614): undefined reference to `acc_delete_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.566845609981101
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:41:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06668984197312966
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:91:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:99:9: warning: implicit declaration of function 'acc_delete_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:100:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_async.c:103:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_async-4e2ece.o: in function `test2':\nacc_delete_async.c:(.text+0x614): undefined reference to `acc_delete_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5683335660141893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5672101399977691
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7680157919821795,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:42:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:46:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n7 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0667172140092589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_finalize_async-f654c7.o: in function `test2':\nacc_delete_finalize_async.c:(.text+0x697): undefined reference to `acc_delete_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5169660900137387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:28:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:35:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:42:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:46:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06623387199942954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:93:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:101:9: warning: implicit declaration of function 'acc_delete_finalize_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:102:47: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n        #pragma acc enter data copyin(c[0:n]) async(1)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_delete_finalize_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_delete_finalize_async-16805d.o: in function `test2':\nacc_delete_finalize_async.c:(.text+0x697): undefined reference to `acc_delete_finalize_async'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.516671290009981
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_deviceptr.c:25:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_deviceptr.c:25:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06604225400951691
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36698570201406255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2164689740166068,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_free.c/acc_free.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_free.c:7:29: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_free.c:7:112: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_free.c:10:110: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                             ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06663082301383838
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_free.c/acc_free.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36705737601732835
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21763322700280696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_default_async.c:9:18: warning: implicit declaration of function 'acc_get_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n    int holder = acc_get_default_async();\n                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_default_async.c:19:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_default_async.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(holder)\n                    ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06564063401310705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36760722199687734
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11712612200062722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36669133297982626
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11666540199075826,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624972299905494
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11605571399559267,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3673329900193494
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11634989298181608,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:12:24: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n                       ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:12:107: error: use of undeclared identifier 'acc_property_memory'\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n                                                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:13:107: error: use of undeclared identifier 'acc_property_free_memory'\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:14:28: warning: implicit declaration of function 'acc_get_property_string' is invalid in C99 [-Wimplicit-function-declaration]\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:14:118: error: use of undeclared identifier 'acc_property_name'\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n                                                                                                                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:15:118: error: use of undeclared identifier 'acc_property_vendor'\n        returned_string2 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_vendor);\n                                                                                                                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c:16:118: error: use of undeclared identifier 'acc_property_driver'\n        returned_string3 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_driver);\n                                                                                                                     ^\n2 warnings and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07422782099456526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_get_property.c/acc_get_property.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664053899992723
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11639997697784565,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36667519400361925
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7222904849913903,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_init.c/acc_init.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_init.c:8:9: warning: implicit declaration of function 'acc_init' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_init(acc_get_device_type());\n        ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_init.c:8:9: warning: implicit declaration of function 'acc_init' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_init(acc_get_device_type());\n        ^\n1 warning generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_init-c68569.o: in function `test1':\nacc_init.c:(.text+0x2b): undefined reference to `acc_init'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3151736349973362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_init.c/acc_init.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31627643399406224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1160759619961027,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4677107559982687
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7179397960135248,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_malloc.c:6:29: warning: implicit declaration of function 'acc_get_property' is invalid in C99 [-Wimplicit-function-declaration]\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_malloc.c:6:112: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_malloc.c:12:110: error: use of undeclared identifier 'acc_property_free_memory'\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n                                                                                                             ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06641607198980637
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3671718499972485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1657478740089573,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165773339977022
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.5184603499947116,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165876940009184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.1178931149770506,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_map_data.c/acc_map_data.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667913590092212
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.0707817719958257,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_map_data.c/acc_map_data.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46653330701519735
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_map_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.2203431869857013,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_map_data.c/acc_map_data.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172768689808436
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668664169905242,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162098690052517
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: invalid argument \nCUDA error: invalid argument \nOMP: Error #334: acc_memcpy_device failed\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7672436010034289,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367287536006188
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1671938420040533,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device.c:20:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device.c:20:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06495293098851107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36711077598738484
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11671766999643296,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:32:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:41:9: warning: implicit declaration of function 'acc_memcpy_from_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_memcpy_from_device_async(a, devdata, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:50:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:58:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(5)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:66:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3) wait(1, 2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:74:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(6) wait(4, 5)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:32:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:84:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(1)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:90:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(2)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:96:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(4)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:102:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(5)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:108:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c:114:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(6)\n                ^\n8 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06582523899851367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367488299991237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11706800298998132,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device.c:24:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device.c:24:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06586371100274846
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3695081699988805
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16685591198620386,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:37:5: warning: implicit declaration of function 'acc_memcpy_to_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_memcpy_to_device_async(devdata, a, n * sizeof(real_t), 1);\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:44:22: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data deviceptr(devdata)\n                     ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:46:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:53:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:60:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:67:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(5)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:74:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3) wait(1, 2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:81:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(6) wait(4, 5)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:44:5: error: expected at least one data clause for '#pragma acc data'\n    #pragma acc data deviceptr(devdata)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:90:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update host(hostdata[2*n:n]) async(3)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:91:46: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update host(hostdata[5*n:n]) async(6)\n                                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c:100:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(6)\n                ^\n10 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06570171800558455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167487259779591
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11629745498066768,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164209920039866
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7191570469876751,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c:22:9: warning: implicit declaration of function 'acc_set_default_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_set_default_async(1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c:23:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0657678620191291
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665014890138991
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16710766102187335,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5156955179991201
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667572164995363,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36684471898479387
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16655213499325328,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_shutdown.c:8:9: warning: implicit declaration of function 'acc_shutdown' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_shutdown(acc_get_device_type());\n        ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_shutdown.c:8:9: warning: implicit declaration of function 'acc_shutdown' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_shutdown(acc_get_device_type());\n        ^\n1 warning generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_shutdown-5f1ad5.o: in function `test1':\nacc_shutdown.c:(.text+0x2b): undefined reference to `acc_shutdown'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36667334000230767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36719249899033457
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11583062299177982,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46586663302150555
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.16816796301282,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170014949981123
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.2685349269886501,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.569480827980442
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.2181634089793079,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c:117:45: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n                                            ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5181082210037857
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nacc_unmap_data.c:119:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.2187246959947515,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170484940172173
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170194070204161,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5157365849881899
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664752560085617,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:33:9: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:49:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:56:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n8 warnings and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06484347701189108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607408399577253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:33:9: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:42:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:49:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:56:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n4 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06598425601259805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:97:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:104:13: warning: implicit declaration of function 'acc_update_device_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:105:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_device_async.c:120:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n4 warnings and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066469370998675
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667745170067064
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675352049991488,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:45:9: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:47:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n9 warnings and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652391460025683
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n6 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06589739400078543
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:45:9: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:47:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait\n                    ^\n3 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06533735900302418
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:90:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:97:13: warning: implicit declaration of function 'acc_update_self_async' is invalid in C99 [-Wimplicit-function-declaration]\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:98:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:106:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:113:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:120:34: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n            #pragma acc parallel async(1) wait(2)\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_update_self_async.c:127:25: error: unknown or unsupported OpenACC directive\n            #pragma acc wait(1)\n                        ^\n6 warnings and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06521554000210017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:38:5: warning: implicit declaration of function 'acc_wait' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_wait(1);\n    ^\n6 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:20:66: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n                                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:21:58: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:22:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:29:58: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n                                                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:36:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(e[0:n]) async(1)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c:38:5: warning: implicit declaration of function 'acc_wait' is invalid in C99 [-Wimplicit-function-declaration]\n    acc_wait(1);\n    ^\n6 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_wait-b92fad.o: in function `test1':\nacc_wait.c:(.text+0x7a1): undefined reference to `acc_wait'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5168199760082643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31621778500266373
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16695764099131338,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:26:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:33:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:47:9: warning: implicit declaration of function 'acc_wait_all' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all();\n        ^\n4 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:26:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:33:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c:47:9: warning: implicit declaration of function 'acc_wait_all' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all();\n        ^\n4 warnings generated.\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/acc_wait_all-fd77f4.o: in function `test1':\nacc_wait_all.c:(.text+0x67b): undefined reference to `acc_wait_all'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4670187839947175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36682006300543435
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1668997649976518,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:40:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:47:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:54:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:61:9: warning: implicit declaration of function 'acc_wait_all_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_all_async(4);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:62:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:69:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:75:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:81:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(3)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:88:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(4)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c:95:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(4)\n                    ^\n9 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06562648800900206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36702222999883816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1165335249970667,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:30:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:37:9: warning: implicit declaration of function 'acc_wait_async' is invalid in C99 [-Wimplicit-function-declaration]\n        acc_wait_async(1, 2);\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:45:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:53:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c:60:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n5 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06499105299008079
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31645667101838626
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11562498999410309,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_bitand_equals.c/atomic_bitand_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitand_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitand_equals.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5173228060011752
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7177736349985935,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_bitor_equals.c/atomic_bitor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48488167201867327
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7173911720165052,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_bitxor_equals.c/atomic_bitxor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46755529500660487
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667357429978438,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_bitand_equals.c/atomic_capture_bitand_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitand_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162331720057409
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7173778770084027,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_bitor_equals.c/atomic_capture_bitor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitor_equals.c:74:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5175651180034038
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7702105880016461,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_bitxor_equals.c/atomic_capture_bitxor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5186838950030506
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667858780012466,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_divided_equals.c/atomic_capture_divided_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667717120028101
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7184156040020753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_bitand_x.c/atomic_capture_expr_bitand_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c:76:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516293555003358
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7688034010061529,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4668201429885812
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_capture_expr_bitor_x.c:58:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.0689037370029837,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36729093198664486
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1664286149898544,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_bitxor_x.c/atomic_capture_expr_bitxor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c:72:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4659506309835706
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7176699220144656,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_divided_x.c/atomic_capture_expr_divided_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170601650024764
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7174697179871146,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_lshift_x.c/atomic_capture_expr_lshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5757874469854869
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7178872670046985,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_minus_x.c/atomic_capture_expr_minus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4661986530118156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7171113090007566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_multiply_x.c/atomic_capture_expr_multiply_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4681954600091558
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.668398696987424,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_plus_x.c/atomic_capture_expr_plus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c:61:21: error: invalid statement after '#pragma acc atomic capture'\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int) n/10 + 1)];\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c:61:72: note: expected one operand of this expression to match other expression\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int) n/10 + 1)];\n                                                         ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c:61:28: note: other expression appears here\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int) n/10 + 1)];\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06522039999254048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_plus_x.c/atomic_capture_expr_plus_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665830109966919
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2199808789882809,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_expr_rshift_x.c/atomic_capture_expr_rshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166084519878495
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6674155530054122,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_lshift_equals.c/atomic_capture_lshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516511290014023
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6676329979964066,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167415399919264
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\natomic_capture_minus_equals.c:55:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.1696764280204661,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668033819994889
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16657676102477126,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_multiply_equals.c/atomic_capture_multiply_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46684569100034423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6682891320087947,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_plus_equals.c/atomic_capture_plus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172112470027059
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8242054280126467,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_postdecrement.c/atomic_capture_postdecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4689644040190615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6683945590048097,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_postincrement.c/atomic_capture_postincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4658298449940048
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669128829962574,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_predecrement.c/atomic_capture_predecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516925825009821
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6671728799992707,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_preincrement.c/atomic_capture_preincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169125800020993
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669071929936763,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_capture_rshift_equals.c/atomic_capture_rshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_capture_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5174356369825546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6677867550170049,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_divided_equals.c/atomic_divided_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171381499967538
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.668667459016433,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_bitand_x.c/atomic_expr_bitand_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4670635969960131
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.768604469980346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_bitor_x.c/atomic_expr_bitor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5208756359934341
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7770555620081723,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_bitxor_x.c/atomic_expr_bitxor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5177149469964206
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7673832309956197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_divided_x.c/atomic_expr_divided_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161459390074015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7188063319772482,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_lshift_x.c/atomic_expr_lshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516649008000968
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667069080052897,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_minus_x.c/atomic_expr_minus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168193359859288
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170839569880627,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_multiply_x.c/atomic_expr_multiply_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.517506838979898
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172856540128123,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_plus_x.c/atomic_expr_plus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_plus_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_plus_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4673380389867816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6678564040048514,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_expr_rshift_x.c/atomic_expr_rshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5201578559936024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7177058679808397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_lshift_equals.c/atomic_lshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167603460140526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.767765212978702,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_minus_equals.c/atomic_minus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4669917529972736
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172695339831989,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_multiply_equals.c/atomic_multiply_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167572490172461
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6678497919929214,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_plus_equals.c/atomic_plus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46604266099166125
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6685316950024571,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_postdecrement.c/atomic_postdecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4671188810025342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717712190002203,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_postincrement.c/atomic_postincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4661928919958882
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7182702420104761,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_predecrement.c/atomic_predecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172804959875066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7673824290104676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_preincrement.c/atomic_preincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5180760209914297
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7184987880173139,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_rshift_equals.c/atomic_rshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5192652000114322
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7179118820058648,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_assign.c/atomic_structured_assign_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: note: use function 'fabs' instead\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^~~\n            fabs\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: note: use function 'fabs' instead\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^~~\n            fabs\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:34:13: note: use function 'fabs' instead\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            ^~~\n            fabs\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_assign.c:37:13: note: use function 'fabs' instead\n        if (abs(b[x] - a[x]) > PRECISION){\n            ^~~\n            fabs\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6214844109781552
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.76805147799314,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitand_equals.c/atomic_structured_assign_bitand_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06668164700386114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitand_equals.c/atomic_structured_assign_bitand_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3169840339978691
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16712428198661655,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitor_equals.c/atomic_structured_assign_bitor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11588601800031029
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitor_equals.c/atomic_structured_assign_bitor_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36861486302223057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1157881039835047,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitxor_equals.c/atomic_structured_assign_bitxor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06680166098522022
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_bitxor_equals.c/atomic_structured_assign_bitxor_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36685044001205824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11586720100603998,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_divided_equals.c/atomic_structured_assign_divided_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46688474298571236
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717180366977118,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitand_x.c/atomic_structured_assign_expr_bitand_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06691648598643951
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitand_x.c/atomic_structured_assign_expr_bitand_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668748360069003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16644055701908655,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitor_x.c/atomic_structured_assign_expr_bitor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539558700751513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitor_x.c/atomic_structured_assign_expr_bitor_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36770203901687637
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1157106299942825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitxor_x.c/atomic_structured_assign_expr_bitxor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614077801350504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_bitxor_x.c/atomic_structured_assign_expr_bitxor_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36919704999309033
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11619377200258896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_divided_x.c/atomic_structured_assign_expr_divided_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: note: use function 'fabs' instead\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^~~\n                       fabs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: warning: using integer absolute value function 'abs' when argument is of floating point type [-Wabsolute-value]\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c:3:24: note: use function 'fabs' instead\n    if (length == 0 && abs(prev - destination) < PRECISION){\n                       ^~~\n                       fabs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4673783839971293
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7176992949971464,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_multiply_x.c/atomic_structured_assign_expr_multiply_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06651520699961111
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_multiply_x.c/atomic_structured_assign_expr_multiply_x.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367395035980735
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16633293600170873,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_expr_plus_x.c/atomic_structured_assign_expr_plus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5175449899979867
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7173047800024506,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_lshift_equals.c/atomic_structured_assign_lshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4671615900006145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173686290043406,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c:59:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c:60:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c:60:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06510416298988275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665956539916806
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16653018299257383,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_multiply_equals.c/atomic_structured_assign_multiply_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11880269000539556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_multiply_equals.c/atomic_structured_assign_multiply_equals.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36796340698492713
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16627672099275514,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_plus_equals.c/atomic_structured_assign_plus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5174001790001057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6174708110047504,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_postdecrement.c/atomic_structured_assign_postdecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166291299974546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7175260219955817,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_postincrement.c/atomic_structured_assign_postincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5674104029894806
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669315780163743,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_predecrement.c/atomic_structured_assign_predecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5155734900035895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171348130214028,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_preincrement.c/atomic_structured_assign_preincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170853919989895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6681536489923019,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_rshift_equals.c/atomic_structured_assign_rshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5179644640011247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7682518709916621,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitand_expr.c/atomic_structured_assign_x_bitand_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06526714799110778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitand_expr.c/atomic_structured_assign_x_bitand_expr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41673809502390213
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1669321040099021,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitor_expr.c/atomic_structured_assign_x_bitor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c:68:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c:69:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c:69:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06695850400137715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitor_expr.c/atomic_structured_assign_x_bitor_expr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5180102179874666
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11814882000908256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitxor_expr.c/atomic_structured_assign_x_bitxor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c:68:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c:69:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c:69:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11643215600633994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_bitxor_expr.c/atomic_structured_assign_x_bitxor_expr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36662133201025426
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11677910399157554,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_divided_expr.c/atomic_structured_assign_x_divided_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159270000003744
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7180459130031522,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_lshift_expr.c/atomic_structured_assign_x_lshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165299150103237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6672148969955742,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:59:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:60:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c:60:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06675370200537145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366694398020627
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11669940501451492,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_multiply_expr.c/atomic_structured_assign_x_multiply_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06497269700048491
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_multiply_expr.c/atomic_structured_assign_x_multiply_expr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661673960159533
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11667587098781951,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_plus_expr.c/atomic_structured_assign_x_plus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.47616189598920755
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7175548960221931,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_assign_x_rshift_expr.c/atomic_structured_assign_x_rshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_assign_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171049390046392
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668464099930134,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitand_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_bitand_equals_assign.c/atomic_structured_bitand_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06597252399660647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_bitand_equals_assign.c/atomic_structured_bitand_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3681668760254979
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1707196419883985,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitor_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_bitor_equals_assign.c/atomic_structured_bitor_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitor_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161842680245172
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6684002869878896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitxor_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_bitxor_equals_assign.c/atomic_structured_bitxor_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06660403299611062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_bitxor_equals_assign.c/atomic_structured_bitxor_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36674480998772196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16603481900529005,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_divided_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_divided_equals_assign.c/atomic_structured_divided_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_divided_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667966359993443
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6675360939989332,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitand_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_bitand_x_assign.c/atomic_structured_expr_bitand_x_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06619148299796507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_bitand_x_assign.c/atomic_structured_expr_bitand_x_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666780560160987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16637992300093174,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitor_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_bitor_x_assign.c/atomic_structured_expr_bitor_x_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitor_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46626774000469595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6674771740217693,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitxor_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_bitxor_x_assign.c/atomic_structured_expr_bitxor_x_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c:68:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c:69:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c:69:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06514764399616979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_bitxor_x_assign.c/atomic_structured_expr_bitxor_x_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661873799865134
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16602953901747242,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_multiply_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_multiply_x_assign.c/atomic_structured_expr_multiply_x_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06584893297986127
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_multiply_x_assign.c/atomic_structured_expr_multiply_x_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36703189701074734
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11630481798783876,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_plus_x_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_expr_plus_x_assign.c/atomic_structured_expr_plus_x_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_expr_plus_x_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160755249962676
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6674242749868426,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_lshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_lshift_equals_assign.c/atomic_structured_lshift_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c:61:51: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                        #pragma acc atomic update capture\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c:62:25: error: invalid statement after '#pragma acc atomic update'\n                        {\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c:62:25: note: expected statement here to be an expression statement\n                        {\n                        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06518596500973217
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_lshift_equals_assign.c/atomic_structured_lshift_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36730065901065245
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16631693500676192,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_minus_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c:59:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c:60:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c:60:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065948859002674
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661299939849414
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11630927701480687,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_multiply_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_multiply_equals_assign.c/atomic_structured_multiply_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06687891599722207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_multiply_equals_assign.c/atomic_structured_multiply_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36708839298808016
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11606506098178215,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_plus_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_plus_equals_assign.c/atomic_structured_plus_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_plus_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5750056149845477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6674156990193296,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postdecrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_postdecrement_assign.c/atomic_structured_postdecrement_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_postdecrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5668687289871741
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7685081969830208,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postincrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_postincrement_assign.c/atomic_structured_postincrement_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_postincrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667954839824233
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6680628460017033,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_predecrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_predecrement_assign.c/atomic_structured_predecrement_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_predecrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4655922790116165
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7180101020203438,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_preincrement_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_preincrement_assign.c/atomic_structured_preincrement_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_preincrement_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6166299680189695
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668573570204899,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_rshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_rshift_equals_assign.c/atomic_structured_rshift_equals_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c:61:51: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                        #pragma acc atomic update capture\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c:62:25: error: invalid statement after '#pragma acc atomic update'\n                        {\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c:62:25: note: expected statement here to be an expression statement\n                        {\n                        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06540717801544815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_rshift_equals_assign.c/atomic_structured_rshift_equals_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165341120096855
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11629360698862001,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitand_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_bitand_expr_assign.c/atomic_structured_x_bitand_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:10:27: error: invalid operands to binary expression ('real_t' (aka 'double') and 'real_t')\n        if (b[x] == (prev & a[x])){\n                     ~~~~ ^ ~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:19:29: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n            if (is_possible(passed_a, passed_b, length - 1, b[x])){\n                            ^~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:26: note: passing argument to parameter 'a' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:19:39: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n            if (is_possible(passed_a, passed_b, length - 1, b[x])){\n                                      ^~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:37: note: passing argument to parameter 'b' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:68:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:69:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:69:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:96:26: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n                         ^~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:26: note: passing argument to parameter 'a' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:96:34: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n                                 ^~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:37: note: passing argument to parameter 'b' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                                    ^\n4 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157086760213133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_bitand_expr_assign.c/atomic_structured_x_bitand_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:10:27: error: invalid operands to binary expression ('real_t' (aka 'double') and 'real_t')\n        if (b[x] == (prev & a[x])){\n                     ~~~~ ^ ~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:19:29: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n            if (is_possible(passed_a, passed_b, length - 1, b[x])){\n                            ^~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:26: note: passing argument to parameter 'a' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:19:39: warning: incompatible pointer types passing 'int *' to parameter of type 'real_t *' (aka 'double *') [-Wincompatible-pointer-types]\n            if (is_possible(passed_a, passed_b, length - 1, b[x])){\n                                      ^~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c:3:37: note: passing argument to parameter 'b' here\nbool is_possible(real_t* a, real_t* b, int length, real_t prev){\n                                    ^\n2 warnings and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06619586099986918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitor_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_bitor_expr_assign.c/atomic_structured_x_bitor_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitor_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5176221409928985
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6674046780099161,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitxor_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_bitxor_expr_assign.c/atomic_structured_x_bitxor_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c:67:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c:68:21: error: invalid statement after '#pragma acc atomic update'\n                    {\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c:68:21: note: expected statement here to be an expression statement\n                    {\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06620367598952726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_bitxor_expr_assign.c/atomic_structured_x_bitxor_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36696452100295573
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16636854101670906,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_divided_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_divided_expr_assign.c/atomic_structured_x_divided_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_divided_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667673299903981
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6679064439958893,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_lshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_lshift_expr_assign.c/atomic_structured_x_lshift_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c:61:51: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                        #pragma acc atomic update capture\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c:62:25: error: invalid statement after '#pragma acc atomic update'\n                        {\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c:62:25: note: expected statement here to be an expression statement\n                        {\n                        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06531262100907043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_lshift_expr_assign.c/atomic_structured_x_lshift_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36717564502032474
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1674996220099274,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_minus_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c:59:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c:60:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c:60:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06571964200702496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36676165301469155
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11648590498953126,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_multiply_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_multiply_expr_assign.c/atomic_structured_x_multiply_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c:60:43: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                #pragma acc atomic update capture\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c:61:17: error: invalid statement after '#pragma acc atomic update'\n                {\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c:61:17: note: expected statement here to be an expression statement\n                {\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577267000102438
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_multiply_expr_assign.c/atomic_structured_x_multiply_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36716969299595803
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11668626999016851,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_plus_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_plus_expr_assign.c/atomic_structured_x_plus_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_plus_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5680168120015878
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6682074779819231,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_rshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_rshift_expr_assign.c/atomic_structured_x_rshift_expr_assign.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c:61:51: error: unexpected OpenACC clause 'capture', 'update' is specified already\n                        #pragma acc atomic update capture\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c:62:25: error: invalid statement after '#pragma acc atomic update'\n                        {\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c:62:25: note: expected statement here to be an expression statement\n                        {\n                        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655516590049956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_structured_x_rshift_expr_assign.c/atomic_structured_x_rshift_expr_assign.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31590927799697965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.166662739997264,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitand_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_bitand_equals.c/atomic_update_bitand_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitand_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitand_equals.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5179040569928475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6676864750043023,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_bitor_equals.c/atomic_update_bitor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6177244709979277
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6677279809955508,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_bitxor_equals.c/atomic_update_bitxor_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitxor_equals.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_bitxor_equals.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163233780185692
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6720350600080565,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_divided_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_divided_equals.c/atomic_update_divided_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_divided_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172011959948577
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7681565409875475,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_bitand_x.c/atomic_update_expr_bitand_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c:42:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172952520078979
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7171740119811147,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_bitor_x.c/atomic_update_expr_bitor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5674037180142477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7188248030142859,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_bitxor_x.c/atomic_update_expr_bitxor_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167903279943857
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172502250177786,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_divided_x.c/atomic_update_expr_divided_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_divided_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167123129940592
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7184172529960051,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_lshift_x.c/atomic_update_expr_lshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_lshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171091039956082
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6688139979960397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_minus_x.c/atomic_update_expr_minus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_minus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5178448879742064
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7261563150095753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_multiply_x.c/atomic_update_expr_multiply_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_multiply_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5668887580104638
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172419380221982,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_plus_x.c/atomic_update_expr_plus_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_plus_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167918319930322
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6674181340204086,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_expr_rshift_x.c/atomic_update_expr_rshift_x.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_expr_rshift_x.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4658405120135285
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7209480360033922,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_lshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_lshift_equals.c/atomic_update_lshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_lshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4659130669897422
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6674973820045125,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_minus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_minus_equals.c/atomic_update_minus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_minus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163518610061146
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7681288690073416,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_multiply_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_multiply_equals.c/atomic_update_multiply_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_multiply_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46640481599024497
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6675606790231541,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_plus_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_plus_equals.c/atomic_update_plus_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_plus_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4689058829972055
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6677667039912194,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postdecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_postdecrement.c/atomic_update_postdecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_postdecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6172780080232769
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7182423960184678,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_postincrement.c/atomic_update_postincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_postincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46650535298977047
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667077379825059,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_predecrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_predecrement.c/atomic_update_predecrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_predecrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5175612189923413
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6671857790206559,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_preincrement.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_preincrement.c/atomic_update_preincrement.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_preincrement.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46695917000761256
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6673684909765143,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_rshift_equals.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_rshift_equals.c/atomic_update_rshift_equals.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_rshift_equals.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5676982369914185
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170314459945075,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_bitand_expr.c/atomic_update_x_bitand_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4662459190003574
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.767727238999214,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_bitor_expr.c/atomic_update_x_bitor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.466827895026654
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6664563679951243,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_bitxor_expr.c/atomic_update_x_bitxor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.466491807019338
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7184393250208814,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_divided_expr.c/atomic_update_x_divided_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667888699972536
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6676333660143428,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_lshift_expr.c/atomic_update_x_lshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46633659102371894
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6666655890003312,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_minus_expr.c/atomic_update_x_minus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516835602989886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.718135536997579,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_multiply_expr.c/atomic_update_x_multiply_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516731510986574
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666691174992593,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_plus_expr.c/atomic_update_x_plus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46682907702052034
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7184904079767875,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_update_x_rshift_expr.c/atomic_update_x_rshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_update_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46642786799930036
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173734339885414,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_bitand_expr.c/atomic_x_bitand_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitand_expr.c:41:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46593491901876405
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7171271450060885,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_bitor_expr.c/atomic_x_bitor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5665725170110818
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.667800676979823,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_bitxor_expr.c/atomic_x_bitxor_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: warning: using floating point absolute value function 'fabs' when argument is of integer type [-Wabsolute-value]\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_bitxor_expr.c:39:13: note: use function 'abs' instead\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            ^~~~\n            abs\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.528478863008786
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7175437539990526,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_divided_expr.c/atomic_x_divided_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_divided_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46590274802292697
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7174968559993431,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_lshift_expr.c/atomic_x_lshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_lshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162597300077323
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667079899925739,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_minus_expr.c/atomic_x_minus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_minus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169177470088471
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6672478380205575,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_multiply_expr.c/atomic_x_multiply_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_multiply_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164309600077104
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6672121610026807,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_plus_expr.c/atomic_x_plus_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_plus_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4661692160007078
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170767619973049,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/atomic_x_rshift_expr.c/atomic_x_rshift_expr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/atomic_x_rshift_expr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4661728440260049
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173487399995793,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_copy_no_lower_bound.c/data_copy_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_copy_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171963380125817
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.716313518001698,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_copyin_no_lower_bound.c/data_copyin_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166603979887441
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666826950997347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_copyout_no_lower_bound.c/data_copyout_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5670466430019587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.718232319020899,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5672968500002753
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667141878977418,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_create.c/data_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160303309967276
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\ndata_create.c:81:13: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.1190976100042462,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_create.c/data_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4666894069814589
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\ndata_create.c:81:13: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.1193930610024836,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_create.c/data_create.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5674807830073405
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6677971519820858,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_create_no_lower_bound.c/data_create_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665134590177331
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669424069987144,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_present_no_lower_bound.c/data_present_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_present_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169137920020148
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162146640184801,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_with_changing_subscript.c/data_with_changing_subscript.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_with_changing_subscript.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4669566559896339
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6670435459818691,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_structs.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/data_with_structs.c/data_with_structs.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/data_with_structs.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.517043152009137
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667805588018382,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06874848398729227
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0659276910009794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06589670100947842
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06591162001132034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06559725399711169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:177:43: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n]) attach(datapointer)\n                                          ^\n1 warning and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0661593530094251
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_copyin.c/declare_copyin.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:4:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:39:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(mult_copyin)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:8:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:9:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_copyin.c:10:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare copyin(n)\n            ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06671130302129313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06535783599247225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06598656999995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06661700701806694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614769998122938
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600290999631397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:192:37: warning: extra tokens at the end of '#pragma acc data' are ignored [-Wextra-tokens]\n    #pragma acc data copyin(a[0:n]) attach(datapointer)\n                                    ^\n1 warning and 5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06698893097927794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_create.c/declare_create.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:51:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(mult_create)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(datapointer)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_create.c:11:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare create(n)\n            ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06616240800940432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_device_resident.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06604748300742358
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0668998240143992
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0668243039981462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06584167899563909
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06765687701408751
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0669563300034497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600257998798043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "In file included from /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:3:\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/acc_testsuite_declare.h:63:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(mult_device_resident)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:5:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(fixed_size_array)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:6:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(scalar)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_device_resident.c:7:13: error: unknown or unsupported OpenACC directive\n#pragma acc declare device_resident(datapointer)\n            ^\n4 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662002990138717
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06541004401515238
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06539058798807673
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066784127993742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06599802200798877
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06655505098751746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copy.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copy(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06608579499879852
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06595198600552976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06752579298336059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06599968401133083
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06629122898448259
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06723103200783953
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06640622299164534
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06610852701123804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyin.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyin(a[0:n], b[0:n])\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06640369800152257
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066493485996034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06633145399973728
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06612024002242833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06759940000483766
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06624180599465035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_copyout.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare copyout(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066672531014774
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520042300689965
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614628800889477
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06616878000204451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614653900032863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06743914101389237
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520076299784705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06629364399123006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_create.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare create(c[0:n])\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614301199442707
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06521537099615671
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06557591300224885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1166916909860447
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_deviceptr.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare deviceptr(c)\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06665907500428148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06594727700576186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06657188199460506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06565836700610816
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/declare_function_scope_present.c:3:17: error: unknown or unsupported OpenACC directive\n    #pragma acc declare present(c[0:n])\n                ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06645488401409239
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_data_copyin_no_lower_bound.c/enter_data_copyin_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46701859097811393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8686876519932412,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_data_create.c/enter_data_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169106349931099
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9177271240041591,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_data_create_no_lower_bound.c/enter_data_create_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5179433720186353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7188666329893749,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_exit_data_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663837789790705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.17301615799078718,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:19:51: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n    #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:30:50: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(dev)\n                                                 ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06545275400276296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:59:51: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n    #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:70:50: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(host)\n                                                 ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06508736201794818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:112:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n                                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:127:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(dev)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06623261899221689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:168:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(host)\n                                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:185:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0666969759913627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:226:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc enter data'\n        #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n                                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c:237:55: error: unexpected OpenACC clause 'if' in directive '#pragma acc exit data'\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n                                                      ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06616776800365187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36716307199094445
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2169953869888559,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/exit_data.c/exit_data.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5666791369731072
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6679134999867529,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/exit_data_copyout_no_lower_bound.c/exit_data_copyout_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172545569948852
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7177644860057626,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.517246390983928
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7684846149932127,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/exit_data_delete_no_lower_bound.c/exit_data_delete_no_lower_bound.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5184365319728386
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.668110708007589,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_finalize.c:77:66: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n                                                                 ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/exit_data_finalize.c:77:66: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n                                                                 ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163866460206918
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.7191814300022088,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/host_data.c/host_data.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/host_data.c:22:17: error: unknown or unsupported OpenACC directive\n    #pragma acc host_data use_device(a)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11610722899786197
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/host_data.c/host_data.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46761774900369346
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26677187299355865,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init.c/init.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614942400483415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init.c/init.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41757933399640024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2677653479913715,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_num.c/init_device_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06621073899441399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_num.c/init_device_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36633116999291815
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11612645597779192,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type.c/init_device_type.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(host)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655310699949041
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type.c/init_device_type.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36652291801874526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1661815130210016,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(host) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06631089499569498
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36749766700086184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11649340999429114,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(nvidia) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06520097400061786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160750070004724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16699185501784086,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_nvidia.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc init device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06586759799392894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41747512901201844
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11869862501043826,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_if.c/init_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c:15:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num == device_num)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11679614501190372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_if.c/init_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.08875748698483221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_if.c/init_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c:15:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num == device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06597163301194087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/init_if.c/init_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/init_if.c:30:14: error: unknown or unsupported OpenACC directive\n        #pragma acc init if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06582078998326324
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_async.c/kernels_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels async(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels async(2)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:41:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels wait(1, 2) async(3)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:43:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:49:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(1, 2)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:51:43: warning: extra tokens at the end of '#pragma acc exit data' are ignored [-Wextra-tokens]\n    #pragma acc exit data copyout(g[0:n]) async(3)\n                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c:60:17: error: unknown or unsupported OpenACC directive\n    #pragma acc wait(3)\n                ^\n1 warning and 8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06576268200296909
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_async.c/kernels_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3671233890054282
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11639329299214296,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603206499130465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066172908002045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600690798950382
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06665032898308709
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0666376450099051
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06611713400343433
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copy(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06664438801817596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copy.c/kernels_copy.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:48:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:61:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:63:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:59:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:92:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:109:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copy(c[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:111:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copy.c:104:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06656111200572923
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n8 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06583415498607792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06675884200376458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06586683599743992
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06573047197889537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662589090061374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06676380999851972
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:20:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06669912999495864
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:47:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:63:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyin(a[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:65:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:58:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copy(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:93:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:103:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyin.c:105:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06700141399051063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07079110702034086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0670226929942146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536187400342897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:46:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:59:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:61:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_copyout.c:57:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06585420400369912
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06599495600676164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0661263299989514
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607672898098826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06634334599948488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06659842198132537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06576554698403925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:25:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels create(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:27:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:23:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06625692499801517
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_create.c/kernels_create.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:63:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:59:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:96:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:98:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:102:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_create.c:94:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    ^\n5 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06628556799842045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n5 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06698974201572128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06606852301047184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06588083200040273
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:50:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(devtest[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc kernels\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06658767201588489
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_present.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels default(present)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_present.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600038599572144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31631830098922364
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1665859569911845,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36591317001148127
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11657287899288349,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06636197099578567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:52:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:54:9: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06667764001758769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:100:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:102:13: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06583065900485963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:151:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c:153:13: error: function 'test4' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06706748800934292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_if.c/kernels_if.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3672997370013036
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11622996799997054,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop.c/kernels_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels loop copy(a[0:1024]) copyout(b[0:1024])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06807117001153529
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop.c/kernels_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4172487070027273
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11612430200329982,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_independent.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop independent\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06598959601251408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36624517900054343
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11654386500595137,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(+:total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06611779500963166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36780925799394026
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1223726829921361,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(avg)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(+:avg)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06617731699952856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4678965100029018
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11638823401881382,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(+:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06580949999624863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4172661699994933
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11712701301439665,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(&&:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06507437801337801
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36696271802065894
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11869602199294604,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:40:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06524846298270859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41838242299854755
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1163132640067488,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06703882399597205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36681571399094537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11599195501185022,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(&:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06555648799985647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367787787981797
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11861683399183676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:30:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(&:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:28:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:38:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c:28:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.16544696100754663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46752135001588613
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11623612101539038,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:29:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(c)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&:c)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c:27:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06580717500764877
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36771679599769413
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1171413199917879,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(|:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06743988301604986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4206493939855136
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11609662999399006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:37:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:42:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06519686602405272
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36846393000450917
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11739433198818006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:28:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:31:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c:26:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06649038000614382
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3681590310006868
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11657305900007486,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(^:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06657145099597983
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36740303999977186
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11628730600932613,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652517179842107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36661372700473294
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.17102595401229337,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06518019500072114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666467989969533
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11647260098834522,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(max:max)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06679398700362071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36661659300443716
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11555348601541482,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06722871802048758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668058559997007
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16648573998827487,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06525853101629764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4672043790051248
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11587297302321531,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(min:min)\n                    ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06579009399865754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06582667099428363
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:24:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop reduction(min:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06594110501464456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41730337898479775
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11619540399988182,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(min:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06569772100192495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3673404339933768
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1168913530127611,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(*:multiplied_total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06493547800346278
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159446640056558
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11637971800519153,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:25:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0658588910009712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36682168502011336
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11581425301847048,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06553103899932466
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36697108499356546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11571448601898737,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: note: place parentheses around the assignment to silence this warning\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n                ^\n           (                                                )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:13:17: note: use '==' to turn this assignment into an equality comparison\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n                ^\n                ==\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop reduction(||:result)\n                    ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577399399247952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36640809298842214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11570474799373187,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop gang private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:28:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:33:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06501770101021975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36678378502256237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11577889800537378,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c:21:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0666633139771875
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36645897399284877
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11662368598626927,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_seq.c:18:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop seq\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577935299719684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3673110230010934
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11877755500609055,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c:21:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06550108498777263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06621833398821764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c:21:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06680413699359633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_tile.c:68:19: error: unknown or unsupported OpenACC directive\n      #pragma acc kernels loop tile(n/10, n, n*2)\n                  ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0667369109869469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11634154798230156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.368225830985466
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11746719002258033,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop worker\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop worker\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06617362998076715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36706716899061576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11607648400240578,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_gangs.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_gangs.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop num_gangs(16)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06675264998921193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36729166700388305
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11621895999996923,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_workers.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_workers.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels loop num_workers(16)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06557024299399927
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36680165299912915
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11711517200456001,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_present.c/kernels_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_present.c:16:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels present(a[0:n], b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_present.c:18:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06667426400235854
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_present.c/kernels_present.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3675532060151454
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2164886640093755,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_scalar_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_scalar_default_copy.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels num_gangs(1) vector_length(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_scalar_default_copy.c:24:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_scalar_default_copy.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06540404399856925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36673867600620724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11611491601797752,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_vector_length.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_vector_length.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc kernels vector_length(16)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_vector_length.c:19:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_vector_length.c:15:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06546192200039513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36694687299313955
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11694394299411215,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_wait.c/kernels_wait.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_wait.c:17:59: warning: extra tokens at the end of '#pragma acc enter data' are ignored [-Wextra-tokens]\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_wait.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc kernels wait(1)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_wait.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11534895599470474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/kernels_wait.c/kernels_wait.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4171952019969467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11663054800010286,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/loop_collapse.c/loop_collapse.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171208840038162
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7176448430109303,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse_default.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/loop_no_collapse_default.c/loop_no_collapse_default.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/loop_no_collapse_default.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172968729748391
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7177678320149425,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel.c/parallel.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5179913489846513
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7186816070170607,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_async.c/parallel_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:27:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:34:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:41:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel wait(1, 2) async(3)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:48:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(c[0:n]) async(1)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:49:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(f[0:n]) async(2)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:50:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(g[0:n]) async(3)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:52:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:58:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c:64:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(3)\n                    ^\n6 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11596412397921085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_async.c/parallel_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46795731101883575
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16740791301708668,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_copy.c/parallel_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5669995729986113
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7181213120056782,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5677341139817145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7187624479993246,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5176096160139423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7179686480085365,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_create.c/parallel_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5673022379924078
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7175023659947328,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5174940410070121
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8194088250165805,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_default_present.c/parallel_default_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_default_present.c:13:26: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel default(present)\n                         ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_default_present.c:13:26: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel default(present)\n                         ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5680188050027937
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6675695879966952,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_deviceptr.c:20:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel deviceptr(b)\n                             ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_deviceptr.c:20:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel deviceptr(b)\n                             ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170604719896801
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_deviceptr.c:20:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.2690569139958825,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4195031490235124
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16657617199234664,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c:24:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06685026298509911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06762975797755644
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c:24:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11673418199643493
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_firstprivate.c:70:43: error: subarray is not supported in 'firstprivate' clause\n        #pragma acc parallel firstprivate(c[0:n])\n                                          ^~~~~~\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11569471200346015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0664657549932599
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06722879901644774
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11634412300190888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11968045099638402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06740146200172603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06648832699283957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:18:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(host)\n                         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06693377799820155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_if.c/parallel_if.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:55:9: error: use of undeclared identifier 'devtest'; did you mean 'dev_test'?\n    if (devtest[0] != 0){\n        ^~~~~~~\n        dev_test\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:44:11: note: 'dev_test' declared here\n    int * dev_test = (int *)malloc(sizeof(int));\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:63:30: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_if.c:102:26: error: unexpected OpenACC clause 'if' in directive '#pragma acc parallel'\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n                         ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0668470659875311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5678850960102864
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9186569320154376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_capture.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_independent_atomic_capture.c/parallel_independent_atomic_capture.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_independent_atomic_capture.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5177114559919573
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7175409089832101,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_read.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_independent_atomic_read.c/parallel_independent_atomic_read.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_independent_atomic_read.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5180770889855921
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7694166040164419,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_update.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_independent_atomic_update.c/parallel_independent_atomic_update.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_independent_atomic_update.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6171967659902293
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7182009200041648,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_write.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_independent_atomic_write.c/parallel_independent_atomic_write.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_independent_atomic_write.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4675077610008884
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667619168991223,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop.c/parallel_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5193092479894403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.767370415996993,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_async.c:27:39: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n            #pragma acc parallel loop async(x)\n                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_async.c:31:39: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n            #pragma acc parallel loop async(x) reduction(+:errors[x])\n                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_async.c:38:17: error: unknown or unsupported OpenACC directive\n                                #pragma acc wait\n                                            ^\n2 warnings and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11653367697726935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36822900699917227
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16621299399412237,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4677758210164029
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.7686015219951514,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_gang.c/parallel_loop_gang.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_gang.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172950489795767
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7198640139831696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161482899857219
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_independent.c:16:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.1696786649990827,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41689779798616655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16689766198396683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_independent_reduction.c/parallel_loop_independent_reduction.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_independent_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6174800250155386
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.719501246989239,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c:57:47: error: subarray is not supported in 'reduction' clause\n        #pragma acc parallel loop reduction(+:c[0:10])\n                                              ^~~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662984529917594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c:57:47: error: subarray is not supported in 'reduction' clause\n        #pragma acc parallel loop reduction(+:c[0:10])\n                                              ^~~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0663364730135072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6175095199723728
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7672158470086288,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt1.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36635359600768425
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16642009999486618,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6675686249800492
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6693094140209723,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6172445649863221
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7694348180084489,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7686857299995609
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7187815340002999,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6681094850064255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7680293759913184,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6170024730090518
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173548720020335,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6197759000060614
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7191287120222114,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7179850969987456
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7689313690061681,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c8 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.720442613994237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8189811870106496,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c9 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9694783400045708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7685180279950146,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt2.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46701088300324045
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16827203700086102,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6189234789926559
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6675271280109882,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6684208149963524
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169411790091544,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6174801950110123
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7203050369862467,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6712642619968392
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7684963869978674,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6677523879916407
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8196424820052925,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.668490384996403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7676443670061417,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c:232:13: error: 'total' requires 128 bit size 'long double' type support, but target 'nvptx64-nvidia-cuda' does not support it\n            total += a[x] + b[x];\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c:220:17: note: 'total' defined here\n    long double total = 10;\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2195900420192629
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c8 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_add_general_type_check_pt2-5785f0.o: in function `.omp_outlined.':\nparallel_loop_reduction_add_general_type_check_pt2.c:(.text+0x8ed): undefined reference to `__atomic_load'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: parallel_loop_reduction_add_general_type_check_pt2.c:(.text+0x962): undefined reference to `__atomic_compare_exchange'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7203714110073633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c9 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8687874309835024
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8700912100030109,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt3.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x66735c8: ch = store<(store (s80) into %ir.28, align 16)> 0x69a4a90, 0x6673b78, 0x6673768, undef:i64\n  0x6673b78: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x69a2558, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x67eb790: i64 = ConstantPool<float 0.000000e+00> 0\n    0x66737d0: i64 = undef\n  0x6673768: i64 = add nuw 0x67eb8c8, Constant:i64<16>\n    0x67eb8c8: i64,ch,glue = NVPTXISD::ProxyReg 0x6673630, 0x6673698, 0x6673630:1\n      0x6673698: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66730e8, Constant:i32<1>, Constant:i32<0>, 0x66730e8:1\n        0x69a4dd0: i32 = Constant<1>\n        0x69a4a28: i32 = Constant<0>\n        0x66730e8: ch,glue = NVPTXISD::CallArgEnd 0x67eaf70, Constant:i32<1>, 0x67eaf70:1\n          0x69a4dd0: i32 = Constant<1>\n          0x67eaf70: ch,glue = NVPTXISD::LastCallArg 0x66734f8, Constant:i32<1>, Constant:i32<0>, 0x66734f8:1\n            0x69a4dd0: i32 = Constant<1>\n            0x69a4a28: i32 = Constant<0>\n            0x66734f8: ch,glue = NVPTXISD::CallArgBegin 0x6673700, 0x6673700:1\n              0x6673700: ch,glue = NVPTXISD::CallVoid 0x6673970, 0x6673c48, 0x6673970:1\n                0x6673c48: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x6673220: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x6673970: ch,glue = NVPTXISD::PrintConvergentCallUni 0x6673a40, Constant:i32<1>, 0x6673a40:1\n                  0x69a4dd0: i32 = Constant<1>\n                  0x6673a40: ch,glue = NVPTXISD::DeclareRet 0x66739d8, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x66739d8:1\n\n\n\n\n      0x6673630: ch,glue = callseq_end 0x6673698:1, TargetConstant:i64<25>, TargetConstant:i64<26>, 0x6673698:2\n        0x69a43a8: i64 = TargetConstant<25>\n        0x69a4270: i64 = TargetConstant<26>\n        0x6673698: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66730e8, Constant:i32<1>, Constant:i32<0>, 0x66730e8:1\n          0x69a4dd0: i32 = Constant<1>\n          0x69a4a28: i32 = Constant<0>\n          0x66730e8: ch,glue = NVPTXISD::CallArgEnd 0x67eaf70, Constant:i32<1>, 0x67eaf70:1\n            0x69a4dd0: i32 = Constant<1>\n            0x67eaf70: ch,glue = NVPTXISD::LastCallArg 0x66734f8, Constant:i32<1>, Constant:i32<0>, 0x66734f8:1\n              0x69a4dd0: i32 = Constant<1>\n              0x69a4a28: i32 = Constant<0>\n              0x66734f8: ch,glue = NVPTXISD::CallArgBegin 0x6673700, 0x6673700:1\n                0x6673700: ch,glue = NVPTXISD::CallVoid 0x6673970, 0x6673c48, 0x6673970:1\n                  0x6673c48: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x6673970: ch,glue = NVPTXISD::PrintConvergentCallUni 0x6673a40, Constant:i32<1>, 0x6673a40:1\n\n\n    0x69a4d68: i64 = Constant<16>\n  0x66737d0: i64 = undef\nIn function: __omp_outlined__1\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/build/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": false,
                    "output": "",
                    "result": 70,
                    "runtime": 0.4172719290072564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x66bc8f8: ch = store<(store (s80) into %ir.28, align 16)> 0x64c90e8, 0x64c9908, 0x64c9838, undef:i64\n  0x64c9908: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x660d4b8, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x64c91b8: i64 = ConstantPool<float 0.000000e+00> 0\n    0x66bc278: i64 = undef\n  0x64c9838: i64 = add nuw 0x66bc0d8, Constant:i64<16>\n    0x66bc0d8: i64,ch,glue = NVPTXISD::ProxyReg 0x66bc1a8, 0x66bc890, 0x66bc1a8:1\n      0x66bc890: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66bc828, Constant:i32<1>, Constant:i32<0>, 0x66bc828:1\n        0x64c8f48: i32 = Constant<1>\n        0x66c1dd0: i32 = Constant<0>\n        0x66bc828: ch,glue = NVPTXISD::CallArgEnd 0x66bc758, Constant:i32<1>, 0x66bc758:1\n          0x64c8f48: i32 = Constant<1>\n          0x66bc758: ch,glue = NVPTXISD::LastCallArg 0x66bc620, Constant:i32<1>, Constant:i32<0>, 0x66bc620:1\n            0x64c8f48: i32 = Constant<1>\n            0x66c1dd0: i32 = Constant<0>\n            0x66bc620: ch,glue = NVPTXISD::CallArgBegin 0x66bc2e0, 0x66bc2e0:1\n              0x66bc2e0: ch,glue = NVPTXISD::CallVoid 0x66bc008, 0x64c9080, 0x66bc008:1\n                0x64c9080: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x64c97d0: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x66bc008: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c95c8, Constant:i32<1>, 0x64c95c8:1\n                  0x64c8f48: i32 = Constant<1>\n                  0x64c95c8: ch,glue = NVPTXISD::DeclareRet 0x66bbd98, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x66bbd98:1\n\n\n\n\n      0x66bc1a8: ch,glue = callseq_end 0x66bc890:1, TargetConstant:i64<4>, TargetConstant:i64<5>, 0x66bc890:2\n        0x66bbfa0: i64 = TargetConstant<4>\n        0x66c1fd8: i64 = TargetConstant<5>\n        0x66bc890: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66bc828, Constant:i32<1>, Constant:i32<0>, 0x66bc828:1\n          0x64c8f48: i32 = Constant<1>\n          0x66c1dd0: i32 = Constant<0>\n          0x66bc828: ch,glue = NVPTXISD::CallArgEnd 0x66bc758, Constant:i32<1>, 0x66bc758:1\n            0x64c8f48: i32 = Constant<1>\n            0x66bc758: ch,glue = NVPTXISD::LastCallArg 0x66bc620, Constant:i32<1>, Constant:i32<0>, 0x66bc620:1\n              0x64c8f48: i32 = Constant<1>\n              0x66c1dd0: i32 = Constant<0>\n              0x66bc620: ch,glue = NVPTXISD::CallArgBegin 0x66bc2e0, 0x66bc2e0:1\n                0x66bc2e0: ch,glue = NVPTXISD::CallVoid 0x66bc008, 0x64c9080, 0x66bc008:1\n                  0x64c9080: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x66bc008: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c95c8, Constant:i32<1>, 0x64c95c8:1\n\n\n    0x64c9b10: i64 = Constant<16>\n  0x66bc278: i64 = undef\nIn function: __omp_outlined__\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/build/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": false,
                    "output": "",
                    "result": 70,
                    "runtime": 0.2665438199765049
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_add_general_type_check_pt3-e43187.o: in function `.omp_outlined.':\nparallel_loop_reduction_add_general_type_check_pt3.c:(.text+0x90a): undefined reference to `__atomic_load'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: parallel_loop_reduction_add_general_type_check_pt3.c:(.text+0x98e): undefined reference to `__atomic_compare_exchange'\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6686637809907552
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "fatal error: error in backend: Cannot select: 0x66bc8f8: ch = store<(store (s80) into %ir.28, align 16)> 0x64c90e8, 0x64c9908, 0x64c9838, undef:i64\n  0x64c9908: f80,ch = load<(load (s32) from constant-pool), anyext from f32> 0x660d4b8, ConstantPool:i64<float 0.000000e+00> 0, undef:i64\n    0x64c91b8: i64 = ConstantPool<float 0.000000e+00> 0\n    0x66bc278: i64 = undef\n  0x64c9838: i64 = add nuw 0x66bc0d8, Constant:i64<16>\n    0x66bc0d8: i64,ch,glue = NVPTXISD::ProxyReg 0x66bc1a8, 0x66bc890, 0x66bc1a8:1\n      0x66bc890: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66bc828, Constant:i32<1>, Constant:i32<0>, 0x66bc828:1\n        0x64c8f48: i32 = Constant<1>\n        0x66c1dd0: i32 = Constant<0>\n        0x66bc828: ch,glue = NVPTXISD::CallArgEnd 0x66bc758, Constant:i32<1>, 0x66bc758:1\n          0x64c8f48: i32 = Constant<1>\n          0x66bc758: ch,glue = NVPTXISD::LastCallArg 0x66bc620, Constant:i32<1>, Constant:i32<0>, 0x66bc620:1\n            0x64c8f48: i32 = Constant<1>\n            0x66c1dd0: i32 = Constant<0>\n            0x66bc620: ch,glue = NVPTXISD::CallArgBegin 0x66bc2e0, 0x66bc2e0:1\n              0x66bc2e0: ch,glue = NVPTXISD::CallVoid 0x66bc008, 0x64c9080, 0x66bc008:1\n                0x64c9080: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n                  0x64c97d0: i64 = TargetGlobalAddress<i8* (i64)* @__kmpc_alloc_shared> 0\n                0x66bc008: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c95c8, Constant:i32<1>, 0x64c95c8:1\n                  0x64c8f48: i32 = Constant<1>\n                  0x64c95c8: ch,glue = NVPTXISD::DeclareRet 0x66bbd98, Constant:i32<1>, Constant:i32<64>, Constant:i32<0>, 0x66bbd98:1\n\n\n\n\n      0x66bc1a8: ch,glue = callseq_end 0x66bc890:1, TargetConstant:i64<4>, TargetConstant:i64<5>, 0x66bc890:2\n        0x66bbfa0: i64 = TargetConstant<4>\n        0x66c1fd8: i64 = TargetConstant<5>\n        0x66bc890: i64,ch,glue = NVPTXISD::LoadParam<(load (s64), align 16)> 0x66bc828, Constant:i32<1>, Constant:i32<0>, 0x66bc828:1\n          0x64c8f48: i32 = Constant<1>\n          0x66c1dd0: i32 = Constant<0>\n          0x66bc828: ch,glue = NVPTXISD::CallArgEnd 0x66bc758, Constant:i32<1>, 0x66bc758:1\n            0x64c8f48: i32 = Constant<1>\n            0x66bc758: ch,glue = NVPTXISD::LastCallArg 0x66bc620, Constant:i32<1>, Constant:i32<0>, 0x66bc620:1\n              0x64c8f48: i32 = Constant<1>\n              0x66c1dd0: i32 = Constant<0>\n              0x66bc620: ch,glue = NVPTXISD::CallArgBegin 0x66bc2e0, 0x66bc2e0:1\n                0x66bc2e0: ch,glue = NVPTXISD::CallVoid 0x66bc008, 0x64c9080, 0x66bc008:1\n                  0x64c9080: i64 = NVPTXISD::Wrapper TargetGlobalAddress:i64<i8* (i64)* @__kmpc_alloc_shared> 0\n\n                  0x66bc008: ch,glue = NVPTXISD::PrintConvergentCallUni 0x64c95c8, Constant:i32<1>, 0x64c95c8:1\n\n\n    0x64c9b10: i64 = Constant<16>\n  0x66bc278: i64 = undef\nIn function: __omp_outlined__\nclang-15: error: clang frontend command failed with exit code 70 (use -v to see invocation)\nclang version 15.0.0 (https://github.com/llvm-doe-org/llvm-project.git 4879e96e471ef059c052d48d70225d39630d9f03)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /global/homes/v/vaidhy/llvm-project/build/bin\nclang-15: note: diagnostic msg: Error generating preprocessed source(s).\n",
                    "export": true,
                    "output": "",
                    "result": 70,
                    "runtime": 0.2683663319912739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:80:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop worker reduction(+:avgs)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:63:12: note: 'avgs' defined here\n    real_t avgs[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06591379799647257
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:80:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop worker reduction(+:avgs)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:63:12: note: 'avgs' defined here\n    real_t avgs[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563305000890978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9187382439849898
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: Error returned from cuLaunchKernel\nCUDA error: out of memory \nLibomptarget error: Executing target region abort target.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_reduction_add_loop.c:21:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7193537050043233,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:80:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop worker reduction(+:avgs)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c:63:12: note: 'avgs' defined here\n    real_t avgs[5];\n           ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06958174300962128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop_type_check_pt1.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop_type_check_pt1.c/parallel_loop_reduction_add_loop_type_check_pt1.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8687919569783844
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: Error returned from cuLaunchKernel\nCUDA error: too many resources requested for launch \nLibomptarget error: Executing target region abort target.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_reduction_add_loop_type_check_pt1.c:89:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7674452200008091,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop_type_check_pt1.c/parallel_loop_reduction_add_loop_type_check_pt1.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9196329830156174
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: Error returned from cuLaunchKernel\nCUDA error: too many resources requested for launch \nLibomptarget error: Executing target region abort target.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_reduction_add_loop_type_check_pt1.c:89:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.6672186329960823,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_loop_type_check_pt1.c/parallel_loop_reduction_add_loop_type_check_pt1.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_loop_type_check_pt1.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41910780599573627
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.16678661899641156,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:69:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop vector reduction(+:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:50:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11869093700079247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:69:49: error: OpenACC reduction operator '+' argument must be of arithmetic type\n            #pragma acc loop vector reduction(+:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c:50:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06672722601797432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5676037890079897
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6682301419787109,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06571660900954157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11722796599497087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_general-f838b7.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5675148729933426
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:70:48: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(&&:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c:51:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06804075700347312
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06550518400035799
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07477379299234599
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_loop-fd837d.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8178758099966217
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:103:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop worker reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c:73:10: note: 'device' defined here\n    char device[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11636932400870137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06779046999872662
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11637399299070239
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_and_vector_loop-55e4fe.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5186153600225225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:78:50: error: OpenACC reduction operator '&&' argument must be of arithmetic type\n            #pragma acc loop vector reduction(&&:device)\n                                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:56:10: note: 'device' defined here\n    char device[5];\n         ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c:66:40: warning: expression result unused [-Wunused-value]\n                has_false[x * 5 + y % 5];\n                ~~~~~~~~~ ~~~~~~~~~~~~~^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06934412900591269
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1187729999946896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06742865400156006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_general-be984d.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7200132469879463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:79:47: error: OpenACC reduction operator '&' argument must be of integer type\n        #pragma acc parallel loop reduction(&:device)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c:56:18: note: 'device' defined here\n    unsigned int device[10];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0661157840222586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11716387700289488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06794445699779317
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_loop-b96466.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8686639280058444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:96:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop worker reduction(&:device)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c:73:18: note: 'device' defined here\n    unsigned int device[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1167991760012228
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06639647798147053
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06597415899159387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitand_vector_loop-b00dea.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5180633699928876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:78:49: error: OpenACC reduction operator '&' argument must be of integer type\n            #pragma acc loop vector reduction(&:c)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c:58:18: note: 'c' defined here\n    unsigned int c[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0660107989970129
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06763384799705818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06727499698172323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_general-4f7af8.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.6173136240104213
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:69:47: error: OpenACC reduction operator '|' argument must be of integer type\n        #pragma acc parallel loop reduction(|:b)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c:50:18: note: 'b' defined here\n    unsigned int b[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11573012100416236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06826560699846596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11868970401701517
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_loop-a542eb.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8188024900155142
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:91:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop worker reduction(|:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c:70:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06648034500540234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06503934497595765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06594054700690322
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_bitor_vector_loop-4de346.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5163581280212384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:80:49: error: OpenACC reduction operator '|' argument must be of integer type\n            #pragma acc loop vector reduction(|:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c:61:18: note: 'reduced' defined here\n    unsigned int reduced[5];\n                 ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06646321198786609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:54:47: error: OpenACC reduction operator '^' argument must be of integer type\n        #pragma acc parallel loop reduction(^:b)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:40:18: note: 'b' defined here\n    unsigned int b[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06659645098261535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:54:47: error: OpenACC reduction operator '^' argument must be of integer type\n        #pragma acc parallel loop reduction(^:b)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c:40:18: note: 'b' defined here\n    unsigned int b[10];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06695239499094896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7178694759786595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7179655839863699,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:91:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop worker reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:68:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0670100029965397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:91:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop worker reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c:68:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06611642599455081
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.869131189014297
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9739228659891523,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:65:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop vector reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:52:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06900511699495837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:65:49: error: OpenACC reduction operator '^' argument must be of integer type\n            #pragma acc loop vector reduction(^:temp)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c:52:18: note: 'temp' defined here\n    unsigned int temp[5];\n                 ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11676355000236072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5174113329849206
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7692273159918841,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:62:49: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(max:maximums)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:47:12: note: 'maximums' defined here\n    real_t maximums[10];\n           ^\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11777475799317472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:62:49: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(max:maximums)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:47:12: note: 'maximums' defined here\n    real_t maximums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11991906899493188
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6753149939759169
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7187804450222757,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:88:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop worker reduction(max:temp)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:68:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06737530502141453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:88:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop worker reduction(max:temp)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:68:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06629712201538496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9691735229862388
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: Error returned from cuLaunchKernel\nCUDA error: out of memory \nLibomptarget error: Executing target region abort target.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_reduction_max_loop.c:25:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.7185786289919633,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:88:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop worker reduction(max:temp)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c:68:12: note: 'temp' defined here\n    real_t temp[5];\n           ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06712086001061834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:71:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop vector reduction(max:reduced)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:53:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06685800000559539
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:71:51: error: OpenACC reduction operator 'max' argument must be of real or pointer type\n            #pragma acc loop vector reduction(max:reduced)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c:53:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0663898859929759
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162860220007133
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7180504430143628,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:65:49: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(min:minimums)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:48:12: note: 'minimums' defined here\n    real_t minimums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1173221229983028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:65:49: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n        #pragma acc parallel loop reduction(min:minimums)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c:48:12: note: 'minimums' defined here\n    real_t minimums[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11863853799877688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717573493020609
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7176695820235182,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:80:44: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop reduction(min:reduced)\n                                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:65:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06637240300187841
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:80:44: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop reduction(min:reduced)\n                                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c:65:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06896698600030504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46776443501585163
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7695360229990911,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:68:51: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop vector reduction(min:reduced)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:54:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0665376220131293
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:68:51: error: OpenACC reduction operator 'min' argument must be of real or pointer type\n            #pragma acc loop vector reduction(min:reduced)\n                                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c:54:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06707496399758384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172474769933615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8696365330251865,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:59:47: error: OpenACC reduction operator '*' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:46:12: note: 'multiplicitive_total' defined here\n    real_t multiplicitive_total[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0681871100096032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:59:47: error: OpenACC reduction operator '*' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n                                              ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c:46:12: note: 'multiplicitive_total' defined here\n    real_t multiplicitive_total[10];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06705273300758563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6679954629798885
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7677018590038642,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:83:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:68:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06615961599163711
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:83:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:68:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06674235299578868
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0188953200122342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: Error returned from cuLaunchKernel\nCUDA error: out of memory \nLibomptarget error: Executing target region abort target.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nparallel_loop_reduction_multiply_loop.c:23:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 0.835035426018294,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:83:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c:68:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0665582200163044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:72:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:57:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06640082600642927
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:72:49: error: OpenACC reduction operator '*' argument must be of arithmetic type\n            #pragma acc loop worker reduction(*:reduced)\n                                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c:57:12: note: 'reduced' defined here\n    real_t reduced[5];\n           ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06640322098974138
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6179097970016301
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7177316180022899,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11651328197331168
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0663525470008608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_general-710d14.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5662687970034312
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:69:48: error: OpenACC reduction operator '||' argument must be of arithmetic type\n        #pragma acc parallel loop reduction(||:result)\n                                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c:49:10: note: 'result' defined here\n    char result[5];\n         ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06907128100283444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_loop-8c9c9c.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8177349170146044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3672000990191009
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11616490199230611,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_loop_reduction_or_vector_loop-0edd0e.o: undefined reference to symbol 'exp@@GLIBC_2.29'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4655806089867838
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41616170699126087
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16748249900410883,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_seq.c/parallel_loop_seq.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5698534969997127
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6674097299983259,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_tile.c:21:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_tile.c:68:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(2, 4, 8)\n                                  ^\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_tile.c:21:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n                                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_tile.c:68:35: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop tile(2, 4, 8)\n                                  ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5724985139968339
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167264650110155,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_vector.c/parallel_loop_vector.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_vector.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4663500950264279
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6697361319966149,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_vector_blocking.c/parallel_loop_vector_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4674661989847664
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675995970203076,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_worker.c/parallel_loop_worker.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_worker.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675532609864604
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7680179190065246,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_loop_worker_blocking.c/parallel_loop_worker_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163659180223476
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668964129930828,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_present.c/parallel_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46695940202334896
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717885294026928,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_private.c/parallel_private.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_private.c:22:48: error: subarray is not supported in 'private' clause\n    #pragma acc parallel num_gangs(10) private(c[0:n])\n                                               ^~~~~~\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06650406899279915
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_private.c/parallel_private.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36776280801859684
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16760653999517672,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_reduction.c/parallel_reduction.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171564369811676
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6672779240179807,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_scalar_default_firstprivate.c/parallel_scalar_default_firstprivate.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4672427610203158
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6798516999988351,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_switch.c/parallel_switch.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /tmp/parallel_switch-cc7d23.o: undefined reference to symbol 'floor@@GLIBC_2.2.5'\n/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld: /lib64/libm.so.6: error adding symbols: DSO missing from command line\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46676833601668477
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_switch.c/parallel_switch.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41662989000906236
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11598743198555894,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_wait.c/parallel_wait.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait.c:17:42: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n]) wait(1)\n                                         ^\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait.c:17:42: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n    #pragma acc parallel present(a[0:n]) wait(1)\n                                         ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159647239779588
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171258969756309,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait_devnum.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_wait_devnum.c/parallel_wait_devnum.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait_devnum.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait_devnum.c:17:52: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait_devnum.c:21:34: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(b[0:n]) wait(1)\n                                        ^\n2 warnings generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait_devnum.c:17:52: warning: extra tokens at the end of '#pragma acc parallel loop' are ignored [-Wextra-tokens]\n        #pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n                                                          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_wait_devnum.c:21:34: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(b[0:n]) wait(1)\n                                        ^\n2 warnings generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46625361501355655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6168290500063449,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/parallel_while_loop.c/parallel_while_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/parallel_while_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5659493319981266
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6689995680062566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_bind.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065662188018905
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:109:33: error: function 'test1' has no explicit '#pragma acc routine' but calls function 'host_function_identifier_unnamed', which has '#pragma acc routine vector'\n        if ((!on_host) && (fabs(host_function_identifier_unnamed(a[x], n) + b[x]) > PRECISION)){\n                                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:1: note: '#pragma acc routine' for function 'host_function_identifier_unnamed' appears here\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:113:37: error: function 'test1' has no explicit '#pragma acc routine' but calls function 'host_function_identifier_unnamed', which has '#pragma acc routine vector'\n        else if ((on_host) && (fabs(host_function_identifier_unnamed(a[x], n) - b[x]) > PRECISION)){\n                                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:1: note: '#pragma acc routine' for function 'host_function_identifier_unnamed' appears here\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n^\n3 warnings and 12 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06692207901505753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:152:30: error: function 'test2' has no explicit '#pragma acc routine' but calls function 'host_function_string_unnamed', which has '#pragma acc routine vector'\n        if (!on_host && fabs(host_function_string_unnamed(a[x], n) + b[x]) > PRECISION){\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:1: note: '#pragma acc routine' for function 'host_function_string_unnamed' appears here\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:155:34: error: function 'test2' has no explicit '#pragma acc routine' but calls function 'host_function_string_unnamed', which has '#pragma acc routine vector'\n        else if (on_host && fabs(host_function_string_unnamed(a[x], n) - b[x]) > PRECISION){\n                                 ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:1: note: '#pragma acc routine' for function 'host_function_string_unnamed' appears here\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n^\n3 warnings and 12 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06630955499713309
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06757687201024964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662745010049548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_bind.c/routine_bind.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(host_function_string_named) vector bind(\"device_function_string_named\")\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(host_function_identifier_named) vector bind(device_function_identifier_named)\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:8:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(device_function_identifier_unnamed)\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:5: error: function 'device_function_identifier_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:19:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:26:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine vector bind(\"device_function_string_unnamed\")\n                           ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:5: error: function 'device_function_string_unnamed' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:37:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:5: error: function 'device_function_identifier_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:54:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:5: error: function 'device_function_string_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop reduction(-:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_bind.c:71:32: error: expected reduction operator\n    #pragma acc loop reduction(-:returned)\n                               ^\n3 warnings and 10 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06595640699379146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06586147999041714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:175:11: error: use of undeclared identifier 'x'\n        b[x] = 0;\n          ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:178:17: error: unexpected OpenACC directive '#pragma acc data'\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:179:5: error: expected identifier or '('\n    {\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:180:21: error: unexpected OpenACC directive '#pragma acc parallel'\n        #pragma acc parallel\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:181:9: error: expected identifier or '('\n        {\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:184:5: error: extraneous closing brace ('}')\n    }\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:186:5: error: expected identifier or '('\n    if (validate_data(a, b)){\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:190:5: error: expected identifier or '('\n    return err;\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:191:1: error: extraneous closing brace ('}')\n}\n^\n3 warnings and 19 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0669540090020746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11596899700816721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06618377100676298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06546052198973484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11822876500082202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0705236500070896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06635572100640275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c8 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06637582997791469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c9 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06605972899706103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c10 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06715693802107126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT10 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_gang.c/routine_gang.c11 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_loop_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:9:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_gang_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_loop_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_worker_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:11:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_gang_vector_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:10:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_worker_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_gang_seq_named) gang\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:15:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:12:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_gang_seq_named) gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:18:5: error: function 'called_function_worker' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:111:5: error: function 'test_routine_gang_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop gang private(temp)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:124:16: error: function 'test_routine_gang_gang_named' has no explicit '#pragma acc routine' but calls function 'called_function_gang', which has '#pragma acc routine gang'\n        b[x] = called_function_gang(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:45:1: note: '#pragma acc routine' for function 'called_function_gang' appears here\n#pragma acc routine gang\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:136:16: error: function 'test_routine_gang_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_gang.c:25:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n3 warnings and 10 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06655864001368172
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_nohost.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_nohost.c/routine_nohost.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7681890980165917
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "CUDA error: an illegal memory access was encountered \nLibomptarget error: Call to targetDataEnd failed, abort target.\nLibomptarget error: Failed to process data after launching the kernel.\nLibomptarget error: Consult https://openmp.llvm.org/design/Runtimes.html for debugging options.\nroutine_nohost.c:31:9: Libomptarget fatal error 1: failure of target construct while offloading is mandatory\n",
                    "export": false,
                    "output": "",
                    "result": -6,
                    "runtime": 1.3694906779855955,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_nohost.c/routine_nohost.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_nohost.c:2:28: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine worker nohost\n                           ^\n1 warning generated.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6684236119908746
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21680826699594036,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0664915049856063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06679499198799022
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06740723398979753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577369599835947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06718220398761332
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_seq.c/routine_seq.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_seq_loop_named) seq\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:6:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_seq_seq_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:5:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_seq_loop_named) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_seq.c:36:5: error: function 'test_routine_seq_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop seq\n    ^\n1 warning and 3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06628535100026056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06551332998787984
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06625627598259598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06625441199867055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06682818400440738
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603593498584814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06717196601675823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06625404200167395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT6 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_vector.c/routine_vector.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_loop_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:7:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_vector_vector_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:6:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_loop_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_vector_seq_named) vector\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:8:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_vector_seq_named) vector\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:13:5: error: function 'called_function_vector' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector reduction(+:returned)\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_vector.c:55:5: error: function 'test_routine_vector_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop vector\n    ^\n2 warnings and 6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06700181800988503
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06582990099559538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603842100594193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06528828901355155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06623064901214093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06527525500860065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607406699913554
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06628354798885994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06610799900954589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c8 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662801009893883
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT8 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/routine_worker.c/routine_worker.c9 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_loop_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:8:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_worker_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:7:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_loop_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:20: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine(test_routine_worker_vector_named) worker\n                   ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:10:1: error: '#pragma acc routine' cannot be nested within '#pragma acc routine'\n#pragma acc routine(test_routine_worker_seq_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: note: enclosing '#pragma acc routine' here\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:9:1: error: '#pragma acc routine' must be followed by a lone function prototype or definition\n#pragma acc routine(test_routine_worker_vector_named) worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:75:5: error: function 'test_routine_worker_loop_named' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n    #pragma acc loop worker\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:85:16: error: function 'test_routine_worker_worker_named' has no explicit '#pragma acc routine' but calls function 'called_function_worker', which has '#pragma acc routine worker'\n        b[x] = called_function_worker(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:13:1: note: '#pragma acc routine' for function 'called_function_worker' appears here\n#pragma acc routine worker\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:91:16: error: function 'test_routine_worker_vector_named' has no explicit '#pragma acc routine' but calls function 'called_function_vector', which has '#pragma acc routine vector'\n        b[x] = called_function_vector(a, x, n);\n               ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/routine_worker.c:23:1: note: '#pragma acc routine' for function 'called_function_vector' appears here\n#pragma acc routine vector\n^\n2 warnings and 7 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.066222953988472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial.c/serial.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11693458899389952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial.c/serial.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367502412002068
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16652033300488256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_async.c/serial_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial async(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:29:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial async(2)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:36:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:41:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial wait(1, 2) async(3)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:43:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:48:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(c[0:n]) async(1)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:49:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(f[0:n]) async(2)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:50:41: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n        #pragma acc update host(g[0:n]) async(3)\n                                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:52:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:58:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(2)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c:64:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(3)\n                    ^\n3 warnings and 9 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06578549797995947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_async.c/serial_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36718064101296477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11706478201085702,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copy.c/serial_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copy.c:15:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copy(a[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copy.c:17:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607984699076042
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copy.c/serial_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41728960201726295
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11720643599983305,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyin.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyin.c/serial_copyin.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06499581399839371
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyin.c/serial_copyin.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06725917701260187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyin.c/serial_copyin.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06685849101631902
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyin.c/serial_copyin.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:57:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyin(a[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:59:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyin.c:55:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607844497193582
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyout.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n9 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06602032599039376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06667808300699107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06629720400087535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06644125099410303
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06614298501517624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06605460902210325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06682801301940344
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_copyout.c/serial_copyout.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:56:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial copyout(b[0:n])\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:99:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(hasDevice[0:1])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:111:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial copyout(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:113:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_copyout.c:109:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n6 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06700230899150483
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_create.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_create.c/serial_create.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial create(b[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c:25:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06595199901494198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_create.c/serial_create.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31641413501347415
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16712973997346126,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_copy.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06556485599139705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06645373400533572
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06622734299162403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:68:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:70:17: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_copy.c:66:9: note: enclosing '#pragma acc data' here\n        #pragma acc data copyin(a[0:n], b[0:n])\n        ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06758052899385802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_present.c/serial_default_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_present.c:13:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial default(present)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_present.c:15:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06528622499899939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_default_present.c/serial_default_present.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31768434602417983
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11614744900725782,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_deviceptr.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_deviceptr.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial deviceptr(b)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_deviceptr.c:22:13: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06591559998923913
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31646449002437294
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11579368900856934,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06557286099996418
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06544720599777065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06649391999235377
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:70:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial firstprivate(c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:72:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop gang independent\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_firstprivate.c:68:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06649804700282402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n6 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06588717800332233
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06566001399187371
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0660899959912058
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06598959901020862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06616479597869329
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06629751398577355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06606676199589856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_if.c/serial_if.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:61:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:63:13: error: function 'test2' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:98:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_if.c:100:9: error: function 'test3' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n4 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06589537201216444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop.c/serial_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n4 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513491398072802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop.c/serial_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06632432399783283
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop.c/serial_loop.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.065468906017486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop.c/serial_loop.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:49:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:51:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:55:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop.c:47:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    ^\n3 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06642518198350444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_async.c:27:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial loop async(x)\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_async.c:31:25: error: unknown or unsupported OpenACC directive\n            #pragma acc serial loop async(x)\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_async.c:38:17: error: unknown or unsupported OpenACC directive\n                                #pragma acc wait\n                                            ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0676618590077851
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36672155602718703
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16657411301275715,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_auto.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c:19:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0654137640085537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06671446101972833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c:19:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06610784999793395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_auto.c:52:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial loop auto\n                  ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06760350099648349
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_gang.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_gang.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop gang\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06634739600121975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36670564601081423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11630717798834667,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(+:total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06517738400725648
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4661039459751919
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11661520399502479,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:23:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(avg)\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06575955997686833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3677019649767317
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11656610199133866,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(+:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06657883801381104
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3707023649767507
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11663271501311101,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_general.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(&&:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06649788800859824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667492270178627
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1172115959925577,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:33:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:35:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c:31:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06553758500376716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36831666200305335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11614957399433479,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&&:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c:25:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0651670630031731
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662816740106791
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11695320397848263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(&:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06512519498937763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41669941099826247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11640198499662802,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:31:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:33:3: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n                #pragma acc loop gang private(temp)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c:29:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06623075899551623
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46726849998231046
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21720323400222696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:29:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(c)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(&:c)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c:27:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513092698878609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36765230202581733
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.167293716018321,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c:27:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(|:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06648408199544065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666216389974579
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16619671901571564,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:34:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:37:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:42:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c:32:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06680500999209471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3672380689822603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16704581401427276,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:28:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:31:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(|:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c:26:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06630807401961647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36679101499612443
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1166450289892964,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c:17:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(^:b)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06554575098562054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31560600601369515
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11811811799998395,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0654550910112448
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36705107102170587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11776105102035217,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(^:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c:16:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06622836398310028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41648467001505196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11657669101259671,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(max:max)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]\n    if (found = 0){\n        ~~~~~~^~~\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: note: place parentheses around the assignment to silence this warning\n    if (found = 0){\n              ^\n        (        )\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c:32:15: note: use '==' to turn this assignment into an equality comparison\n    if (found = 0){\n              ^\n              ==\n1 warning and 1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06591024101362564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3674544930108823
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11726633802754804,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:27:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:32:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c:22:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0650947889953386
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36647079698741436
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11728532399865799,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:22:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(max:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06787378501030616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666068119928241
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11757545502041467,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(min:min)\n                    ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603614499908872
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:21: warning: extra tokens at the end of '#pragma acc routine' are ignored [-Wextra-tokens]\n#pragma acc routine (fmin) seq\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_general.c:2:1: error: expected 'gang', 'worker', 'vector', or 'seq' clause for '#pragma acc routine'\n#pragma acc routine (fmin) seq\n^\n1 warning and 1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653689999890048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:24:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c:19:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06541443499736488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36726451900904067
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11562336201313883,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:22:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06546641202294268
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665709949855227
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11687610001536086,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction (*:multiplied_total)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06656594498781487
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416750565986149
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11627070000395179,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:24:2: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop gang private(temp)\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c:20:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06494088098406792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.367137351015117
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11641881702234969,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:20:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:23:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(*:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06507345801219344
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41688270299346186
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.16664420400047675,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_general.c:24:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop reduction(||:result)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06652829400263727
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4172814269841183
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1161373810027726,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:25:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial \n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:30:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:35:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop worker\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c:23:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07016158400801942
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3690953160112258
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1163146129983943,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:23:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop private(temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:26:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop vector reduction(||:temp)\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c:21:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0654265980119817
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41628924501128495
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11553313399781473,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_seq.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_seq.c:18:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop seq\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06681791497976519
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366670460003661
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11624796700198203,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_tile.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06542141901445575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06674320498132147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c:21:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06653097001253627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_tile.c:68:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop tile(2, 4, 8)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06584585999371484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop vector\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06709219599724747
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3671055320010055
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11620337498607114,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:20:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:22:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:27:7: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n      #pragma acc loop vector\n      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:18:3: note: enclosing '#pragma acc data' here\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c:36:11: warning: expression result unused [-Wunused-value]\n      err + 1;\n      ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06575050199171528
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663380500220228
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11672215300495736,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial loop worker\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06605632300488651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36641173699172214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11595162501907907,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:20:19: error: unknown or unsupported OpenACC directive\n      #pragma acc serial\n                  ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:22:9: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop worker\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:27:9: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n        #pragma acc loop worker\n        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:18:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c:36:13: warning: expression result unused [-Wunused-value]\n        err + 1;\n        ~~~ ^ ~\n1 warning and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600396501016803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36702628500643186
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11665712099056691,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_present.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_present.c/serial_present.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_present.c:18:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n], b[0:n]) copy(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_present.c:20:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06713522700010799
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_present.c/serial_present.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3670830799965188
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1161538919841405,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_private.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_private.c/serial_private.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_private.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial private(c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_private.c:26:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop gang\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06621823497698642
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_private.c/serial_private.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42676025797845796
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.24271697999211028,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_reduction.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_reduction.c/serial_reduction.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_reduction.c:14:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial copyin(a[0:n]) reduction(+:reduction)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_reduction.c:16:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513386202277616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_reduction.c/serial_reduction.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162437669816427
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11556052500964142,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:19:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:21:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c:17:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06530615300289355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665400560130365
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11669348998111673,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_switch.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_switch.c/serial_switch.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_switch.c:19:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n], b[0:n], c[0:n])\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_switch.c:21:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06584664201363921
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_switch.c/serial_switch.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41705561499111354
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11625406899838708,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_wait.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_wait.c/serial_wait.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_wait.c:16:39: warning: extra tokens at the end of '#pragma acc update' are ignored [-Wextra-tokens]\n    #pragma acc update device(a[0:n]) async(1)\n                                      ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_wait.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc serial present(a[0:n]) wait(1)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_wait.c:19:9: error: function 'test1' contains orphaned '#pragma acc loop' but has no explicit '#pragma acc routine'\n        #pragma acc loop\n        ^\n1 warning and 2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06587249002768658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_wait.c/serial_wait.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666987630131189
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.1169212740205694,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_while_loop.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_while_loop.c:16:21: error: unknown or unsupported OpenACC directive\n        #pragma acc serial\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_while_loop.c:18:13: error: '#pragma acc loop' cannot be nested within '#pragma acc data'\n            #pragma acc loop\n            ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_while_loop.c:14:5: note: enclosing '#pragma acc data' here\n    #pragma acc data copy(a[0:10*n])\n    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06489510601386428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661720499803778
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11628354398999363,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_default_async.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_default_async.c/set_default_async.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set default_async(1)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:23:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:30:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set default_async(2)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:31:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:38:30: warning: extra tokens at the end of '#pragma acc parallel' are ignored [-Wextra-tokens]\n        #pragma acc parallel async(1) wait(2)\n                             ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c:45:21: error: unknown or unsupported OpenACC directive\n        #pragma acc wait(1)\n                    ^\n3 warnings and 3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06563735200325027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_default_async.c/set_default_async.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41576118901139125
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11650799299241044,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_num.c/set_device_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_num.c:18:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_num.c:22:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_num.c:35:25: error: unknown or unsupported OpenACC directive\n            #pragma acc set device_num(x)\n                        ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0658674809965305
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_num.c/set_device_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668321910081431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11574271498830058,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06587792001664639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577052001375705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07225929998094216
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06635578197892755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06591839602333494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.07204503999673761
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06708587499451824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type.c/set_device_type.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:24:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type.c:39:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(default)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06570153101347387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c:9:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(host) device_num(device_num)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06665261599118821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06601938398671336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c:9:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(host) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06603136600460857
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num.c:22:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(multicore) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06611890002386644
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num_nvidia.c:9:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set device_type(nvidia) device_num(device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06590090299141593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3187880449986551
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21724752598674968,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc set device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06636303599225357
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31600368898944
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11546320200432092,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_if.c/set_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type == device_type)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06528717800392769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_if.c/set_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06588512298185378
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_if.c/set_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type == device_type)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06617839098908007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/set_if.c/set_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/set_if.c:26:21: error: unknown or unsupported OpenACC directive\n        #pragma acc set if(acc_get_device_type != device_type)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06635623300098814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown.c/shutdown.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown.c:8:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06536923098610714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown.c/shutdown.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163171939959284
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11626860700198449,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_num.c:10:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06513488400378264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36594241100829095
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11605508800130337,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06575758499093354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06574303901288658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06607070000609383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06601608800701797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06577995599946007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655171170074027
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06557223998242989
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:17:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type.c:27:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06633060501189902
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n3 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1160326859971974
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0669972290052101
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0666755190177355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06596288800938055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT3 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c4 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06651998902088962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c5 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06676631901063956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c6 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(host) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0664074890082702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c7 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:21:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n                ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num.c:33:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(default) device_num(device_num)\n                ^\n2 errors generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06721590799861588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c:9:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(nvidia) device_num(device_num)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0653025160136167
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365559736994328
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11646778901922517,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_nvidia.c:7:17: error: unknown or unsupported OpenACC directive\n    #pragma acc shutdown device_type(nvidia)\n                ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06524039100622758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160458570055198
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11669018401880749,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_if.c": [
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_if.c/shutdown_if.c0 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num == device_num)\n                    ^\n/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n2 errors generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06600436600274406
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_if.c/shutdown_if.c1 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06705258297733963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT2 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_if.c/shutdown_if.c2 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c:14:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num == device_num)\n                    ^\n1 error generated.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0655272559961304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "/global/homes/v/vaidhy/llvm-project/build/bin/clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda --libomptarget-nvptx-bc-path=/global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libomptarget -L /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/runtime/src -isystem /global/homes/v/vaidhy/llvm-project/build/runtimes/runtimes-bins/openmp/libacc2omp/src -DT1 -o /global/u1/v/vaidhy/RunInfra/OpenACCV-V/build/shutdown_if.c/shutdown_if.c3 /global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/global/homes/v/vaidhy/RunInfra/OpenACCV-V/Tests/shutdown_if.c:28:14: error: unknown or unsupported OpenACC directive\n        #pragma acc shutdown if(device_num != device_num)\n                    ^\n1 error generated.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0662898889859207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_async_test_all.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 8
                        },
                        "7": {
                            "result": "Pass",
                            "run_index": 8
                        }
                    },
                    "acc_copyin_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyout.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_copyout_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 6
                        }
                    },
                    "acc_create_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_delete.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_type.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "3": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "3": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        }
                    },
                    "acc_update_device.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitand_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitand_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitxor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_multiply_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_minus_equals.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_multiply_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_plus_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitor_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitxor_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_multiply_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_minus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_multiply_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_plus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitand_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitxor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitand_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitxor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_multiply_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_plus_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_minus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_multiply_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_plus_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitand_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitxor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_minus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_multiply_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_plus_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitand_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitor_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitxor_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_divided_equals_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitand_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitor_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitxor_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_multiply_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_plus_x_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_lshift_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_minus_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_multiply_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_plus_equals_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postdecrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postincrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_predecrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_preincrement_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_rshift_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitand_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitor_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitxor_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_divided_expr_assign.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_lshift_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_minus_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_multiply_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_plus_expr_assign.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_rshift_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitand_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitor_equals.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitxor_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_divided_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitand_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitor_x.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitxor_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_lshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_multiply_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_rshift_x.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_lshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_minus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_multiply_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_plus_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postdecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_predecrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_preincrement.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_rshift_equals.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitand_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitxor_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_multiply_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitand_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitor_expr.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitxor_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_lshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_multiply_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_rshift_expr.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 2
                        }
                    },
                    "data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_structs.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_device_resident.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "declare_function_scope_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_exit_data_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "exit_data.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_delete_no_lower_bound.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_finalize.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "host_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_workers.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_vector_length.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_no_collapse_default.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_copyin.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_create.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_deviceptr.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_independent_atomic.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_capture.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_read.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_update.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_write.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent_reduction.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt1.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "7": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "8": {
                            "result": "Pass",
                            "run_index": 9
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt2.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "6": {
                            "result": "Pass",
                            "run_index": 9
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt3.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_loop_type_check_pt1.c": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Runtime Error",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_present.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_wait_devnum.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.c": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "routine_bind.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "10": {
                            "result": "Compilation Failure",
                            "run_index": 10
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        },
                        "9": {
                            "result": "Compilation Failure",
                            "run_index": 9
                        }
                    },
                    "routine_nohost.c": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "routine_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        }
                    },
                    "routine_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "serial.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_copyout.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_auto.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_reduction.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_while_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "set_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "login34",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.43_11.0.51-cray_shasta_c",
            "version": "#1 SMP Thu Mar 31 18:57:28 UTC 2022 (514bda1)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    while (!acc_async_test(1));\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(1));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3() {\n    int err = 0;\n    real_t* a = (real_t*)malloc(n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(n * sizeof(real_t));\n    real_t* e = (real_t*)malloc(n * sizeof(real_t));\n    int async_val = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(async_val));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test3();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t*));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x][y] = a[x][y] + b[x][y];\n            }\n        }\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                e[x][y] = c[x][y] + d[x][y];\n            }\n        }\n        #pragma acc update host(e[x:1][0:n]) async(x)\n    }\n   \n    while(!acc_async_test_all());\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], d[0:10*n]) copyout(c[0:10*n], e[0:10*n])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x * n + y] = c[x * n + y] + d[x * n + y];\n                }\n            }\n        }\n        while(!acc_async_test_all());\n    }\n\n    for (int x = 0; x < 10*n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    \n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t *));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n    {\n        for (int x = 0; x < 10; ++x){\n            acc_set_default_async(x);\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x][y] = a[x][y] + b[x][y];\n                }\n            }\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x][y] = c[x][y] + d[x][y];\n                }\n            }\n        }\n        while (!acc_async_test_all());\n    }\n\n    int count = 0;\n    int total = 0;\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < n; ++y) {\n            if (fabs(e[x][y]) < PRECISION) {\n                count += 1;\n            }\n            total += 1;\n        }\n    }\n    printf(\"%d out of %d\\n\", count, total);\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    \n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(a, n * sizeof(real_t));\n    acc_copyout(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        acc_copyout(a, n * sizeof(real_t));\n        acc_copyout(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] - b_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_pcopyin(a, n * sizeof(real_t));\n    acc_pcopyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_copyin(a, n * sizeof(real_t));\n    acc_present_or_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test6() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test6();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\nint test7() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n            c[x] = 0;\n        }\n        \n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel present(a[0:n], b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test7();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,data,executable-data,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(2) wait(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION * 4){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "data",
                            "executable-data",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    acc_copyin_async(b, n*sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err = err + 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyin_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n        }\n\n        acc_copyin_async(a, n * sizeof(real_t), 1);\n        acc_copyin_async(b, n * sizeof(real_t), 2);\n\n        for (int x = 0; x < n; ++x) {\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc wait\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc parallel async(1) present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2) present(f[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        acc_copyout_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    \n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc enter data copyin(c[0:n])\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize(c, n * sizeof(real_t));\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) present(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        acc_copyout_finalize_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,internal-control-values,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,internal-control-values,set,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_pcreate(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0;\n        }\n        acc_create(c, n * sizeof(real_t));\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(c[0:n])\n        #pragma acc exit data copyout(c[0:n])\n    \n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        acc_create_async(c, n * sizeof(real_t), 1);\n        acc_create_async(f, n * sizeof(real_t), 2);\n        #pragma acc data present(c[0:n], f[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    f[x] = d[x] + e[x];\n                }\n            }\n            #pragma acc wait\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n], f[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_create_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    \n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data create(c[0:n])\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n            acc_create_async(c, n * sizeof(real_t), 1);\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) async(1)\n            #pragma acc wait\n        }\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        acc_delete_async(b, n * sizeof(real_t), 1);\n        acc_delete_async(d, n * sizeof(real_t), 2);\n        acc_delete_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,construct-independent,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,syntactic,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,syntactic,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(b, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(d, n * sizeof(real_t), 2);\n        acc_delete_finalize_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n    real_t *b_ptr;\n    real_t *c_ptr;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n\n    a_ptr = acc_deviceptr(a);\n    b_ptr = acc_deviceptr(b);\n    c_ptr = acc_deviceptr(c);\n\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c_ptr[x] = a_ptr[x] + b_ptr[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int *a = (int *)acc_malloc(n * sizeof(int));\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n\n    acc_free(a);\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory < initial_memory + n * sizeof(int)){\n        err += 1;\n    }\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int holder = acc_get_default_async();\n\n    for(int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(holder)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    if (acc_get_default_async() < 0){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            if (acc_get_device_num(acc_get_device_type()) != x){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:1.0-3.2\nint test1(){\n\tint err = 0;\n\n\tint device_type = acc_get_device_type();\n\n\tif (acc_get_device_type() != device_type){\n\t\terr += 1;\n\t}\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if(acc_get_device_type() != acc_device_none && acc_get_num_devices(acc_get_device_type()) == 0){ //Can't have zero of current device type\n          err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        const char* returned_string1;\n        const char* returned_string2;\n        const char* returned_string3;\n        int returned_int;\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n        returned_string2 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_vendor);\n        returned_string3 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_driver);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n\n    a_ptr = acc_create(a, n * sizeof(real_t));\n\n    if (a != acc_hostptr(acc_deviceptr(a))){\n        err += 1;\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,init,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_init(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "init",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,devonly,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n])\n    if (acc_is_present(a, n * sizeof(real_t)) == 0){\n        err += 1;\n    }\n    #pragma acc exit data delete(a[0:n])\n\n    if (devtest[0] == 1){\n        if (acc_is_present(a, n * sizeof(real_t)) != 0){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:1.0-2.7\nint test1(){\n    int err = 0;\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    int *a = (int *)acc_malloc(n * sizeof(int));\n\n    if (initial_memory == 0){\n        return err;\n    }\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory + n * sizeof(int) > initial_memory){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    acc_memcpy_device(a, devdata, n * sizeof(real_t));\n    acc_memcpy_device(b, devdata+n, n * sizeof(real_t));\n    acc_memcpy_device(c, devdata+2*n, n * sizeof(real_t));\n\n    #pragma acc data present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n\n    acc_memcpy_from_device(a, devdata, n * sizeof(real_t));\n    acc_memcpy_from_device(b, &(devdata[n]), n * sizeof(real_t));\n    acc_memcpy_from_device(c, &(devdata[2*n]), n * sizeof(real_t));\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *hostdata_copy = (real_t *)malloc(6 * n * sizeof(real_t));\n\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n        hostdata[3*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[4*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[5*n + x] = 2;\n    }\n\n    for (int x = 0; x < 6*n; ++x){\n        hostdata_copy[x] = hostdata[x];\n    }\n\n    devdata = acc_copyin(hostdata, 6 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        acc_memcpy_from_device_async(a, devdata, n * sizeof(real_t), 1);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(b, &(devdata[n]), n * sizeof(real_t), 2);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(d, &(devdata[3*n]), n * sizeof(real_t), 4);\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(e, &(devdata[4*n]), n * sizeof(real_t), 5);\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(c, &(devdata[2*n]), n * sizeof(real_t), 3);\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(f, &(devdata[5*n]), n * sizeof(real_t), 6);\n    }\n\n    #pragma acc wait(1)\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata_copy[x] * hostdata_copy[x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(2)\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - hostdata_copy[n + x] * hostdata_copy[n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(4)\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - hostdata_copy[3*n + x] * hostdata_copy[3*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(5)\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - hostdata_copy[4*n + x] * hostdata_copy[4*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(f[x] - (2 + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    devdata = acc_create(hostdata, 3 * n * sizeof(real_t));\n\n    acc_memcpy_to_device(devdata, a, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[n]), b, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[2*n]), c, n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(hostdata[0:3*n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2 * n + x] - (1 + hostdata[n + x] + hostdata[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e_host = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 2;\n\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        d_host[x] = d[x];\n        e_host[x] = e[x];\n    }\n\n    devdata = acc_create(hostdata, 6 * n * sizeof(real_t));\n\n    acc_memcpy_to_device_async(devdata, a, n * sizeof(real_t), 1);\n    acc_memcpy_to_device_async(&(devdata[n]), b, n * sizeof(real_t), 2);\n    acc_memcpy_to_device_async(&(devdata[2*n]), c, n * sizeof(real_t), 3);\n    acc_memcpy_to_device_async(&(devdata[3*n]), d, n * sizeof(real_t), 4);\n    acc_memcpy_to_device_async(&(devdata[4*n]), e, n * sizeof(real_t), 5);\n    acc_memcpy_to_device_async(&(devdata[5*n]), f, n * sizeof(real_t), 6);\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n    }\n\n    #pragma acc update host(hostdata[2*n:n]) async(3)\n    #pragma acc update host(hostdata[5*n:n]) async(6)\n\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2*n + x] - (1 + a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4 * PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[5*n + x] - (2 + d_host[x] * d_host[x] + e_host[x] * e_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int device_type = acc_get_device_type();\n\n    if (device_type != acc_device_none){\n        #pragma acc data copy(err)\n        {\n            #pragma acc parallel\n            {\n                if (acc_on_device(device_type) == 0){\n                    err += 1;\n                }\n            }\n        }\n    }\n    else{\n        #pragma acc parallel\n        {\n            if (acc_on_device(acc_device_host) == 0){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,set,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        acc_set_default_async(1);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_set_default_async(2);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,construct-independent,set,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,internal-control-values,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    acc_set_device_type(device_type);\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,shutdown,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_shutdown(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "shutdown"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device(a, n * sizeof(real_t));\n        acc_update_device(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device(a, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device(b, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_device_async(b, n * sizeof(real_t), 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,devonly,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data create(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_update_self(c, n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_self(a, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        acc_update_self(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n\n\n    #pragma acc data create(c[0:n], d[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] * b[x];\n            }\n        }\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        acc_update_self_async(d, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(d[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n\tint err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_self_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] + 1;\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] + 1;\n                }\n            }\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - ((a[x] + 1) * (b[x] + 1))) > 4 * PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    acc_wait(1);\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n], c[0:n], d[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        c_host[x] = c[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = c[x] * c[x];\n            }\n        }\n        acc_wait_all();\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x] + c_host[x] * c_host[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n    real_t *j = (real_t *)malloc(n * sizeof(real_t));\n    real_t *k = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = rand() / (real_t)(RAND_MAX / 10);\n        i[x] = 0;\n        j[x] = 0;\n        k[x] = 0;\n        a_host[x] = a[x];\n        d_host[x] = d[x];\n        g_host[x] = g[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n], h[0:n]) create(c[0:n], f[0:n], i[0:n], j[0:n]) copyout(k[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = g[x] + h[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                j[x] = c[x] + f[x] + i[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x] * c[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            for (int x = 0; x < n; ++x){\n                d[x] = e[x] * f[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            for (int x = 0; x < n; ++x){\n                g[x] = h[x] * i[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                k[x] = j[x] + a[x] + d[x] + g[x];\n            }\n        }\n        #pragma acc wait(4)\n    }\n\n    real_t temp;\n    for (int x = 0; x < n; ++x){\n        temp = a_host[x] + b[x] + d_host[x] + e[x] + g_host[x] + h[x];\n        temp += b[x] * (a_host[x] + b[x]) + e[x] * (d_host[x] + e[x]) + h[x] * (g_host[x] + h[x]);\n        if (fabs(k[x] - temp) > PRECISION * 10){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = 0;\n        i[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n]) create(c[0:n], f[0:n], h[0:n]) copyout(i[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                h[x] = c[x] + g[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = h[x] + f[x];\n            }\n        }\n        #pragma acc wait(2)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(i[x] - (a[x] + b[x] + g[x] + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            b[x] += 1<<y;\n        }\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (iterator = x, iterator2 = 0; iterator < n; iterator += n/10 + 1, iterator2++){\n            temp_a[iterator2] = a[iterator];\n            temp_b[iterator2] = b[iterator];\n        }\n        if (!is_possible(temp_a, temp_b, iterator2, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_indexer = 0;\n    int absolute_indexer = 0;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, temp_indexer = 0; absolute_indexer < n; absolute_indexer += n/10 + 1, temp_indexer++){\n            temp_a[temp_indexer] = a[absolute_indexer];\n            temp_b[temp_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_indexer, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int * temp_a = (int *)malloc(10 * sizeof(int));\n    int * temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (temp_iterator = 0, ab_iterator = x; ab_iterator < n; temp_iterator++, ab_iterator += n/10 + 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_iterator, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n;  ab_iterator+=((n/10) + 1)){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_total = 0;\n    int absolute_indexer;\n    int passed_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                     b[x] = totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        passed_total += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, passed_indexer = 0; absolute_indexer < n; absolute_indexer += (n/10 + 1), passed_indexer++){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, passed_total)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(passed_a, passed_b, passed_indexer - 1, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!(is_possible(&(a[x*3]), &(c[x*3]), 3, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer - 1, 0)){\n            err += 1;\n        }\n        break;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int) n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%((int)(n/10 + 1))] += (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(&(a[3*x]), &(c[3*x]), 3, 0)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = (distribution[(int) (a[x]*b[x]/10)])--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = distribution[(int) (a[x]*b[x]/10)]++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = --distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = ++distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] != totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_copy[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = b[x];\n                    b[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c[x] - b_copy[x]) > PRECISION){\n            err++;\n        }\n        if (abs(b[x] - a[x]) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] &= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] |= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] ^= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] /= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] & totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] | totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] ^ totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t* passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t* passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = (a[x] + b[x]) / totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        for (int y = 0; y < 10 && (x + y) < n; ++y){\n            passed_a[y] = a[x + y];\n            passed_b[y] = b[x + y];\n        }\n        if (!(is_possible_2(passed_a, passed_b, 10, 1, totals[x/10]))){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] <<= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%10];\n                    totals[x%10] -= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    --distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] >>= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] & a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] | a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] ^ a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] << 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%10];\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] >> 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitand_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] &= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] |= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitxor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] ^= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_divided_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n          #pragma acc loop\n          for (int x = 0; x < n; ++x){\n              #pragma acc atomic capture\n              {\n                  totals[x/10] /= (a[x] + b[x]);\n                  c[x] = totals[x/10];\n              }\n          }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitand_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] = a[x] & totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] | totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitxor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n    int y;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] = a[x] ^ totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_multiply_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_plus_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_lshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update capture\n                        {\n                            a[x] <<= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_minus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    totals[x%10] -= (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_multiply_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_plus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postdecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y - 1 == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_predecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    --distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_preincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_rshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update capture\n                        {\n                            a[x] >>= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitand_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] = totals[x/10] & a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        int y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, y - x, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] | a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitxor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                    {\n                        totals[x/10] = totals[x/10] ^ a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    int y;\n    for (int x = 0; x < n; x = x + 10){\n        y = x;\n        for (; y < x + 10 && y < n; y++){\n            temp_a[y - x] = a[y];\n            temp_b[y - x] = b[y];\n        }\n        if (!is_possible(temp_a, temp_b, (y - x) - 1, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_divided_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                    c[x] = totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_lshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update capture\n                        {\n                            a[x] = a[x] << 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_minus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_multiply_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_plus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer - 1, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_rshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update capture\n                        {\n                            a[x] = a[x] >> 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > 10 * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "copy_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copy(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copy(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copy_copyout.cpp": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copy(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copy(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    data_container<real_t> a = *(new data_container<real_t>(n));\n\n    for(int x = 0; x < n; ++x){\n\ta.data[x] = 1.0;\n    }\n\n    #pragma acc parallel loop copy(a, a.data[0:n]) copyout(a, a.data[0:n])\n    for(int x = 0; x < n; ++x){\n\ta.data[x] += 1.0;\n    }\n\n    for(int x = 0; x < n; ++x){\n\tif(fabs(a.data[x] - 2.0) > PRECISION){\n\t    err ++;\n\t}\n    }\n\t\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copyin_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copyin(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copyin(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copyin_copyout.cpp": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copyin(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copyin(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    data_container<real_t> a = *(new data_container<real_t>(n));\n\n    for(int x = 0; x < n; ++x){\n\ta.data[x] = 1.0;\n    }\n\n    #pragma acc parallel loop copyin(a, a.data[0:n]) copyout(a.data[0:n])\n    for(int x = 0; x < n; ++x){\n\ta.data[x] += 1.0;\n    }\n\n    if(a.data != NULL){\n\tfor(int x = 0; x < n; ++x){\n\t    if(fabs(a.data[x] - 2.0) > PRECISION){\n\t\terr = 0;\n\t    }\n\t}\n    }\n    else{\n\terr = n;\n    }\n\t\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc wait(1)\n    \n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc wait(0)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_copy_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[:n], b[:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,reference-counting,devonly,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    if (devtest[0] == 1) {\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int x = 0; x < n; ++x){\n                        c[x] += a[x] + b[x];\n                    }\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION){\n                    err += 1;\n                    break;\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(c[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(zero: b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data present_or_create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data pcreate(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) create(zero: b[0:n]) copyout(b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_present_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) wait(0)\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] += c[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1 \n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_with_changing_subscript.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int length = n;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:length], b[0:length]) copyout(c[0:length])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < length; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        length = 1;\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_structs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    multi_item * a = (multi_item *)malloc(n * sizeof(multi_item));\n\n    for (int x = 0; x < n; ++x){\n        a[x].a = rand() / (real_t)(RAND_MAX / 10);\n        a[x].b = rand() / (real_t)(RAND_MAX / 10);\n        a[x].c = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x].c = a[x].a + a[x].b;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x].c - (a[x].a + a[x].b)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + fixed_size_array[x%10])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(scalar)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_copyin(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,attach,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    datapointer = a;\n    #pragma acc enter data copyin(a[0:n]) attach(datapointer)\n    #pragma acc data present(datapointer[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "attach"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    scalar = 10;\n    #pragma acc update device(scalar)\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc update device(mult_create)\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_create(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    datapointer = a;\n\n    #pragma acc data copyin(a[0:n]) attach(datapointer)\n    {\n        #pragma acc parallel present(datapointer[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_device_resident.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_device_resident(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyin_copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyin_copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[1] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (4 + a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n\n    #pragma acc data copy(c[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            function_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            b_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 0;\n            }\n        }\n\n        #pragma acc data copy(a[0:n][0:n], b[0:n][0:n], c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (a_host[x][y] + b_host[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 1;\n            }\n        }\n\n        #pragma acc data copy(c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] - a_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] - b_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_test(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x][y] - (a[x][y] * (a[x][y] + b[x][y]))) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_as_present(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    create_as_present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_deviceptr.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            devpointer_c[x] = acc_deviceptr(c[x]);\n            declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,runtime,construct-independent,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyout(d[x:1][0:n])\n                {\n                    devpointer_c[x] = acc_copyin(c[x], n * sizeof(real_t));\n                    declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 10){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,present,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                present(a[x], b[x], c[x], d[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,present,devonly,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[:n], b[:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data present_or_create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data pcreate(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_exit_data_if.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,if,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n    #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(dev)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,if,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(host)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,devonly,if,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n        #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(dev)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(host)\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n        }\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n        }\n\n        #pragma acc enter data copyin(a[0:n])\n        #pragma acc parallel present(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] + 1;\n            }\n        }\n        #pragma acc exit data delete(a[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel present(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = a[x] + 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (a_copy[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc data copyin(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc parallel\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(c[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[:n], b[:n]) copyout(c[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,host-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    int * high = (int *)malloc(n * sizeof(int));\n    int high_current_index = 0;\n    size_t * a_points = (size_t *)malloc(n * sizeof(void *));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        if (a[x] > 5) {\n            high[high_current_index] = x;\n            high_current_index += 1;\n        }\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n\n    #pragma acc host_data use_device(a)\n    {\n        int x = 0;\n        for (x = 0; x < high_current_index; ++x){\n            a_points[x] = (size_t) a + (high[x]*sizeof(real_t*));\n        }\n        for (; x < n; ++x){\n            a_points[x] = 0;\n        }\n    }\n    #pragma acc enter data copyin(a_points[0:n])\n    #pragma acc parallel present(a[0:n], a_points[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            if (a_points[x] != 0){\n                *((real_t *) a_points[x]) -= 5;\n            }\n        }\n    }\n    #pragma acc exit data delete(a_points[0:n]) copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (a[x] < 0 || a[x] > 5) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "host-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(host) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(multicore) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(default) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\t\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num == device_num)\n\t//#pragma acc init if(true)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num != device_num)\n\t//#pragma acc init if(false)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test2();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 1);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "kernel_implicit_data_attributes.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/ (real_t)(RAND_MAX / 10);\n\n\t#pragma acc kernels\n\tfor ( int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor(int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *test_array = (real_t *)malloc(n *sizeof(real_t));\n\treal_t *host_array = (real_t *)malloc(n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n\t\ttest_array[x] = rand()/(real_t)(RAND_MAX/ 10);\n\t\thost_array[x] = test_array[x];\n\t}\n\n\t#pragma acc kernels\n\tfor(int x = 0; x < n; ++x){\n\t\ttest_array[x] += test_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - test_array[x]) > PRECISION){\n\t\t\terr = 1;\n                }\n        }\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for(int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed != 0){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "kernels_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tb[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tc[x] = 0.0;\n      \td[x] = rand() / (real_t)(RAND_MAX / 10);\n      \te[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tf[x] = 0.0;\n      \tg[x] = 0.0;\n    }\n    #pragma acc enter data create(g[0:n], c[0:n], f[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc kernels async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc kernels async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc kernels wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n    }\n    #pragma acc wait(1, 2)\n    #pragma acc update host(c[0:n], f[0:n])\n    #pragma acc exit data copyout(g[0:n]) async(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n      \t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc exit data delete(c[0:n], f[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels copy(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 1;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - 1) > PRECISION && (a[x] + b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++ x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                c[x] = 0;\n            }\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION) {\n                    err += 1;\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc kernels copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0.0;\n        }\n\n        #pragma acc data copy(a[0:n], b[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = -1;\n            }\n            #pragma acc kernels copyin(a[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x] - a[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n    \n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels copyout(zero: b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,devonly,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = 0.0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels create(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data-region,default-mapping,reference-counting,devonly,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]), create(b[0:n])\n    #pragma acc kernels default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n]), copyout(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,if,V:1.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,if,V:2.0-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    data_on_device = 1;\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,if,devonly,V:2.0-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n\tdevtest[0] = 0;\n\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n        for (int x = 0; x < n; ++x){\n            a[x] = -1;\n        }\n\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] + 1) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] + 1) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        data_on_device = 0;\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:kernels,if,devonly,V:2.0-3.2\nint test4(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n])\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION && b[x] != a[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(1024 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(1024 * sizeof(real_t));\n\n    for (int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc kernels loop copy(a[0:1024]) copyout(b[0:1024])\n    for (int _0 = 0; _0 < 2; ++_0){\n        #pragma acc loop\n        for (int _1 = 0; _1 < 2; ++_1){\n            #pragma acc loop\n            for (int _2 = 0; _2 < 2; ++_2){\n                #pragma acc loop\n                for (int _3 = 0; _3 < 2; ++_3){\n                    #pragma acc loop\n                    for (int _4 = 0; _4 < 2; ++_4){\n                        #pragma acc loop\n                        for (int _5 = 0; _5 < 2; ++_5){\n                            #pragma acc loop\n                            for (int _6 = 0; _6 < 2; ++_6){\n                                #pragma acc loop\n                                for (int _7 = 0; _7 < 2; ++_7){\n                                    #pragma acc loop\n                                    for (int _8 = 0; _8 < 2; ++_8){\n                                        #pragma acc loop\n                                        for (int _9 = 0; _9 < 2; ++_9){\n                                            b[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9] = a[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    real_t total = 10; //Should be innitialized to 0 anyway.\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc kernels loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    char found = 0;\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    char temp = 1;\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    char temp = 1;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    unsigned int b = 0;\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n    unsigned int host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b = a[0];\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n    unsigned int host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc kernels loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc kernels loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc kernels loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n]) copy(b[0:n])\n  {\n      #pragma acc kernels loop seq\n      for (int x = 1; x < n; ++x){\n          b[x] = b[x-1] + a[x];\n      }\n  }\n\n  for (int x = 1; x < n; ++x){\n      temp += a[x];\n      if (fabs(b[x] - temp) > PRECISION){\n          err = 1;\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n  #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n  {\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              temp = 0;\n              for (int z = 0; z < n; ++z){\n                  temp += a[x] + b[y] + c[z];\n              }\n              d2[x * n + y] = temp;\n          }\n      }\n  }\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          temp = 0.0;\n          for (int z = 0; z < n; ++z){\n              temp += a[x] + b[y] + c[z];\n          }\n          if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n              err += 1;\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n  {\n      #pragma acc kernels loop tile(n/10, n, n*2)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              for (int z = 0; z < n; ++z){\n                  d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n              }\n          }\n      }\n  }\n\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          for (int z = 0; z < n; ++z){\n              if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                  err = 1;\n              }\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_gangs(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_workers(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,structured-data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    #pragma acc kernels present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "structured-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default-mapping,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t sum = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum + a[x];\n    }\n\n    #pragma acc data copyin(b[0:n])\n    {\n        #pragma acc kernels num_gangs(1) vector_length(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                sum = sum + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum - (a[x] + b[x]);\n    }\n\n    if (fabs(sum) > (2 * n - 2) * PRECISION){\n        err += 1;\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + a[x];\n        }\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + b[x];\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels vector_length(16)\n        {\n            #pragma acc loop vector\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n]) async(1)\n    #pragma acc kernels wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(1)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    real_t total;\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n + y];\n            if (fabs(c[x * n + y] - total) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:loop,syntactic,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(2)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse_default.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n +y];\n            if (fabs(total - c[x * n + y]) > PRECISION * y){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc parallel copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if(failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t device = rand() / (real_t)(RAND_MAX / 10);\n    real_t host = device;\n    #pragma acc parallel loop copy(device) reduction(+:device)\n    for(int x = 0; x < n; ++x){\n        device += 1.0;\n    }\n\n    if(fabs(device - host) > PRECISION){\n            err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode +=  (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc parallel copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc parallel copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = a[x];\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] - a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n          if (fabs(a[x] - b[x]) > PRECISION){\n            err += 2;\n            break;\n          }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] - a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x]) > 2 * PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout_zero.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    //for development; logic test\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n      for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n      }\n\n      #pragma acc data copyin(a[0:n])\n      {\n        #pragma acc parallel copyout(zero: b[0:n])\n        {\n          #pragma acc loop\n          {\n            for (int x = 0; x < n; ++x){\n              b[x] += a[x];\n            }\n          }\n        }\n      }\n\n      for (int x = 0; x < n; ++x){\n          if(fabs(a[x] - b[x]) > PRECISION){\n                  err += 1;\n                  break;\n          }\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:3.0-3.1\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x] + 1) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//#T1:parallel,data,data_region,V:3.0-3.2\nint Test1(){\n    int err=0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for( int x = 0; x < n; x++){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]\n    {\n        #pragma acc parallel create(zero: b[0:n])\n        {\n            #pragma acc loop\n            {\n                for(int x = 0; x < n; x++){\n                    b[x] += a[x];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,default,data,data-region,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "default",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,runtime,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc parallel deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "runtime"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,firstprivate,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - (a[x * n + y] + b[x * n + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,firstprivate,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    c[y] = a[x * n + y] - b[x * n + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,if,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc parallel if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,if,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n    int accel = 1;\n    int host = 0;\n\n    dev_test[0] = 1;\n    #pragma acc data copyin(dev_test[0:1])\n    #pragma acc parallel\n    {\n      dev_test[0] = 0;\n    }\n\n    if (devtest[0] != 0){\n        for (int x = 0; x < n;  ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,if,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy clause test wih parallel default(none) and reduction with scalar variable\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int test = rand()/(real_t)(RAND_MAX/10);\n    int host = test;\n\n    #pragma acc parallel default(none) reduction(+:test)\n    for(int x = 0; x < n; ++x){\n\ttest += 1;\n    }\n\n    if(fabs( test - host) >  PRECISION){\n\terr++;\n    }\n    \n    return err;\n} \n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with parallel loop and reduction with scalar variable\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\treal_t a = rand()/(real_t)(RAND_MAX/10);\n\treal_t host = a;\n\n\t#pragma acc parallel loop reduction(+:a)\n\tfor( int x = 0; x < n; ++x){\n\t\ta += 1.0;\n\t}\n\n\tif( fabs( a - host) > PRECISION){\n\t\terr++;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only parallel and reduction with scalar variable\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host_value = rand()/ (real_t)(RAND_MAX/10);\n\tint device_value = host_value;\n\n\t#pragma acc parallel reduction(+:device_value) \n\tfor( int x = 0; x > n; ++ x){\n\t\tdevice_value += device_value;\n\t}\n\tif( fabs(host_value - device_value) > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\t\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += ( 1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\n//copy clause wtth that calles detach action only parallel loop  with aggregate variables\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *)malloc( n * sizeof(real_t));\n\treal_t *device_array = (real_t *)malloc( n * sizeof(real_t));\n\n\tfor(int x = 0; x < n; ++ x){\n\t\thost_array[x] = rand()/(real_t)(RAND_MAX/10);\n\t\tdevice_array[x] = host_array[x];\n\t}\n\n\t#pragma acc parallel loop\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n\t\tif(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n\t\t\terr = 1;\n\t\t}\n\t}\n\tfree(host_array);\n\tfree(device_array);\n\treturn err;\n\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += ( 1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_independent_atomic.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic \n                    a[x] = a[x] * 2; //dependent\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:2.7-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    (a[x])++; //independent - without a clause, you're doing atomic update   \n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_capture.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_read.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic read\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_update.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_write.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic write\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,async,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc parallel loop async(x) reduction(+:errors[x])\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n      #pragma acc parallel loop auto\n      for (int x = 0; x < n; ++x){\n        b[x] = a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(b[x] - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,combined-constructs,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n      #pragma acc parallel loop auto\n      for (int x = 1; x < n; ++x){\n        a[x] = a[x - 1] + a[x];\n      }\n    }\n\n    real_t rolling_total = 0.0;\n    for (int x = 0; x < n; ++x){\n      rolling_total += a_copy[x];\n      if (fabs(rolling_total - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop independent\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    total = 10;\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(total)\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t c[10];\n    real_t c_host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        c[x] = 1.0;\n        c_host[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(+:c[0:10])\n        for (int x = 0; x < n; ++x) {\n            for (int y = 0; y < 10; ++y) {\n                c[y] += a[x * 10 + y] + b[x * 10 + y];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        for (int y = 0; y < 10; ++y) {\n            c_host[y] += a[x * 10 + y] + b[x * 10 + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c_host[x] - c[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt1.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n    _Bool* a = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool* b = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool total = 1;\n    _Bool host_total = 1;\n\n    for (int x = 0; x < n; ++x) {\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            b[x] = 1;\n        }\n        else {\n            b[x] = 0;\n        }\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n    \n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    char * b = (char *)malloc(n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(UCHAR_MAX / 10);\n        b[x] = rand() / (real_t)(UCHAR_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    signed char * a = (signed char *)malloc(n * sizeof(signed char));\n    signed char * b = (signed char *)malloc(n * sizeof(signed char));\n    signed char total = 10;\n    signed char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned char * a = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char * b = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char total = 10;\n    unsigned char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    short int * a = (short int *)malloc(n * sizeof(short int));\n    short int * b = (short int *)malloc(n * sizeof(short int));\n    short int total = 10;\n    short int host_total = 10;    \n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    int * b = (int *)malloc(n * sizeof(int));\n    int total = 10;\n    int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,nonvalidating,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long int * a = (long int *)malloc(n * sizeof(long int));\n    long int * b = (long int *)malloc(n * sizeof(long int));\n    long int total = 10;\n    long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    long long int * a = (long long int *)malloc(n * sizeof(long long int));\n    long long int * b = (long long int *)malloc(n * sizeof(long long int));\n    long long int total = 10;\n    long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt2.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned short int * a = (unsigned short int*)malloc(n * sizeof(unsigned short int));\n    unsigned short int * b = (unsigned short int *)malloc(n * sizeof(unsigned short int));\n    unsigned short int total = 10;\n    unsigned short int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int total = 10;\n    unsigned int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    unsigned long int * a = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int * b = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int total = 10;\n    unsigned long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned long long int * a = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int * b = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int total = 10;\n    unsigned long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n    \n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    float * a = (float *)malloc(n * sizeof(float));\n    float * b = (float *)malloc(n * sizeof(float));\n    float total = 10;\n    float host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(total - host_total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    double * a = (double *)malloc(n * sizeof(double));\n    double * b = (double *)malloc(n * sizeof(double));\n    double total = 10;\n    double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long double * a = (long double *)malloc(n * sizeof(long double));\n    long double * b = (long double *)malloc(n * sizeof(long double));\n    long double total = 10;\n    long double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    float _Complex * a = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex * b = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex total = 10 + 10 * I;\n    float _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(crealf(total) - crealf(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsf(cimagf(total) - cimagf(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt3.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    double _Complex * a = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex * b = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex total = 10 + 10 * I;\n    double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(creal(total) - creal(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabs(cimag(total) - cimag(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    long double _Complex * a = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex * b = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex total = 10 + 10 * I;\n    long double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(creall(total) - creall(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsl(cimagl(total) - cimagl(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(avg)\n        for (int x = 0; x < 10; ++x) {\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y) {\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x) {\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y) {\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y) {\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2() {\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t avgs[5];\n    real_t host_avgs[5];\n\n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25*n], d[0:25*n])\n    {\n        #pragma acc parallel loop gang private(avgs)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = 0;\n            }\n            #pragma acc loop worker reduction(+:avgs)\n            for (int y = 0; y < 5 * n; ++y) {\n                avgs[y % 5] += c[x * 5 * n + y] = a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = avgs[y] / n;\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                d[x * 5 * n + y] = c[x * 5 * n + y] - avgs[y % 5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host_avgs[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            if (fabs(c[x * 5 * n + y] - (a[x * n * 5 + y] + b[x * n * 5 + y])) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = host_avgs[y] / n;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(d[x * 5 * n + y] - (c[x * 5 * n + y] - host_avgs[y % 5])) > PRECISION){\n                err += 1;\n            \n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop_type_check_pt1.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    _Bool * a = (_Bool *)malloc(10 * n * sizeof(_Bool));\n    _Bool * b = (_Bool *)malloc(10 * n * sizeof(_Bool));\n    _Bool * c = (_Bool *)malloc(10 * n * sizeof(_Bool));\n    _Bool * d = (_Bool *)malloc(10 * n * sizeof(_Bool));\n    _Bool total = 1;\n    _Bool host_total = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if ((rand() / ((real_t)RAND_MAX)) > .5) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n        if ((rand() / ((real_t)RAND_MAX)) > .5) {\n            b[x] = 1;\n        }\n        else {\n            b[x] = 0;\n        }\n        if ((rand() / ((real_t)RAND_MAX)) > .5) {\n            c[x] = 1;\n        }\n        else {\n            c[x] = 0;\n        }\n    }\n    /*\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(total)\n        for (int x = 0; x < 10; ++x) {\n            total = 1;\n            #pragma acc loop worker reduction(+:total)\n            for (int y = 0; y < n; ++y) {\n                total += a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] + total;\n            }\n        }\n    }\n    */\n    for (int x = 0; x < 10; ++x) {\n        host_total = 1;\n        for (int y = 0; y < n; ++y) {\n            host_total += a[x * n + y] + b[x * n + y];\n        }\n        for (int y = 0; y < n; ++y) {\n            if (d[x * n + y] != (host_total + c[x * n + y])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * n * sizeof(char));\n    char * c = (char *)malloc(10 * n * sizeof(char));\n    char * d = (char *)malloc(10 * n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n    char temp;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n],b[0:10*n], c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(total)\n        for (int x = 0; x < 10; ++x) {\n            total = 10;\n            #pragma acc loop worker reduction(+:total)\n            for (int y = 0; y < n; ++y) {\n                total += a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] + total;\n            }\n        }\n    }\n    int error_count = 0;\n    int total_count = 0;\n    for (int x = 0; x < 10; ++x) {\n        host_total = 10;\n        for (int y = 0; y < n; ++y) {\n            host_total += a[x * n + y] + b[x * n + y];\n        }\n        for (int y = 0; y < n; ++y) {\n            temp = host_total + c[x * n + y];\n            if (d[x * n + y] != temp) {\n                err += 1;\n                error_count += 1;\n                printf(\"Error location x: %d \\t y: %d\\n\", x, y); \n                printf(\"%d != %d\\n\", d[x * n + y], temp);\n            }\n            total_count += 1;\n        }\n    }\n\n    printf(\"%d out of %d failed\\n\", error_count, total_count);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * c_host = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n        c_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            c_host[x * 5 + (y % 5)] += a[x * 5 * n + y] + b[x * 5 * n + y];\n        }\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        if (fabs(c[x] - c_host[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 5 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5/n));\n    char result[5];\n    char host_result[5];\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 1;\n        host_result[x] = 1;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] && a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] && a[x];\n    }\n\n    for (int x = 0; x < 5; ++x){\n        if (host_result[x] != result[x]) {\n            err += 1;\n        } \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                a[x * n + y] = a[x * n + y] ^ temp;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 25 * sizeof(char));\n    char * a_copy = (char *)malloc(n * 25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        device[x] = 1;\n        host[x] = 1;\n        for (int y = 0; y < 5; ++y) {\n            has_false[x * 5 + y] = 0;\n        }\n    }\n\n    for (int x = 0; x < 25 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else {\n            a[x] = 0;\n            a_copy[x] = 0;\n            has_false[x % 25] = 1;\n        }\n    }\n\n    #pragma acc data copy(a[0:25*n])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop worker reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                a[x * 5 * n + y] = a[x * 5 * n + y] ^ device[y%5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a_copy[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (a[x * 5 * n + y] != (a_copy[x * 5 * n + y] ^ host[y % 5])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(25 * n * sizeof(char));\n    char * b = (char *)malloc(25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin) {\n                a[x] = 1;\n            }\n            else {\n                a[x] = 0;\n                has_false[x * 5 + y % 5];\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop vector reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y){\n                b[x * 5 + y] = device[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != host[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    b = a[0];\n    host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int device[10];\n    unsigned int host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        device[x] = 0;\n        host[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            device[x] += 1<<y;\n            host[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(&:device)\n        for (int x = 0; x < 10 * n; ++x) {\n            device[x%10] = device[x%10] & a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host[x%10] = host[x%10] & a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host[x] != device[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int * host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int device[5];\n    unsigned int host[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop worker reduction(&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = device[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (host[y] != c[x * 5 + y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (b[x * 5 * n + y] != (host[y%5] + b_copy[x * 5 * n + y])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copyout(b[0:10])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int c[5];\n    unsigned int * b_host = (unsigned int *)malloc(5 * sizeof(unsigned int));\n    \n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copyout(b[0:25])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                c[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 0; y < 5 * n; ++y) {\n                c[y%5] = c[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = c[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            b_host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            b_host[y%5] = b_host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b_host[y] != b[x * 5 + y]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(5 * n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int b[5];\n    unsigned int host_b[5];\n\n    for (int x = 0; x < 5 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t) RAND_MAX > false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < 5 * n; ++x) {\n            b[x%5] = b[x%5] | a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x){\n        host_b[x%5] = host_b[x%5] | a[x];\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                a[x * n + y] += (1<<z);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int temp[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 25 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += (1<<y);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x){\n        for (int y = 0; y < 5; ++y){\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y){\n            if (c[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if ((b_copy[x * 5 * n + y] + c[x * 5 + (y % 5)]) != b[x * 5 * n + y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int reduced[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(|:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != reduced[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int b[10];\n    unsigned int host_b[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < 10 * n; ++x) {\n            b[x % 10] = b[x % 10] ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_b[x % 10] = host_b[x % 10] ^ a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,nonvalidating,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        temp[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y){\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t maximums[10];\n    real_t max_host[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        maximums[x] = 0;\n        max_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(max:maximums)\n        for (int x = 0; x < 10 * n; ++x) {\n            maximums[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        max_host[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n    }\n    \n    for (int x = 0; x < 10; ++x) {\n        if (fabs(max_host[x] - maximums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * host_maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximum[x] = 0;\n        host_maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(c[0:25*n], maximum[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], temp[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximum[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            host_maximum[x * 5 + (y % 5)] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], host_maximum[x * 5 + (y % 5)]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(host_maximum[x * 5 + y] - maximum[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximums[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(maximums[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(max:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(maximums[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc parallel loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t minimums[10];\n    real_t host_minimums[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        minimums[x] = 1000;\n        host_minimums[x] = 1000;\n    }\n\n    printf(\"Here\");\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(min:minimums)\n        for (int x = 0; x < 10 * n; ++x) {\n            minimums[x%10] = fmin(a[x] * b[x], minimums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_minimums[x%10] = fmin(a[x] * b[x], host_minimums[x%10]);\n    }\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(minimums[x] - host_minimums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t minimums[25];\n    real_t host_minimums[25];\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25], c[0:25*n])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_minimums[x * 5 + y] = reduced[y];\n            if (fabs(host_minimums[x * 5 + y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * minimums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop vector reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(reduced[y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc parallel loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n\n    real_t multiplicitive_total[10];\n\n    for (int x = 0; x < m_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        multiplicitive_total[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n])\n    {\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n        for (int x = 0; x < 10 * m_n; ++x) {\n            multiplicitive_total[x%10] = multiplicitive_total[x%10] * (a[x] + b[x]);\n        }\n    }\n\n    for (int x = 0; x < 10 * m_n; ++x) {\n        multiplicitive_total[x%10] /= (a[x] + b[x]);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(multiplicitive_total[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * m_n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n]) copyout(c[0:10*m_n], totals[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < m_n; ++y){\n                temp *= a[x * m_n + y] + b[x * m_n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < m_n; ++y){\n                c[x * m_n + y] = (a[x * m_n + y] + b[x * m_n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < m_n; ++y){\n            temp *= a[x * m_n + y] + b[x * m_n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < m_n; ++y){\n            if (fabs(c[x * m_n + y] - ((a[x * m_n + y] + b[x * m_n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * m_n * sizeof(real_t));\n\n    real_t * totals = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y%5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1() {\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x) {\n        a[x] = rand() / (real_t)RAND_MAX;\n        b[x] = rand() / (real_t)RAND_MAX;\n    }\n\n#pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n#pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x) {\n            temp = 1.0;\n#pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y) {\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < multiplicitive_n; ++y) {\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c[x] - 1) > PRECISION* (4 * multiplicitive_n - 1)) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2() {\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* totals = (real_t*)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[(x * 5) + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION){\n                err += 1;\n            }   \n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_loop_reduction_or_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char* a = (char *)malloc(5 * n * sizeof(char));\n    char result[5];\n    char host_result[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 0;\n        host_result[x] = 0;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) > false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] || a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] || a[x];\n    }\n    \n    for (int x = 0; x < 5; ++x) {\n        if (host_result[x] != result[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc parallel loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,vector,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "vector",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc parallel\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err + 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,present,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc parallel num_gangs(10) private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    real_t temp;\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t tempc = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc parallel present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_devnum.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n\t#pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n        for (int x = 0; x < n; ++x){\n\t    b[x] = a[x];\n        }\n\t#pragma acc update host(b[0:n]) wait(1)\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_queue.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1)\n        #pragma acc update host(f[0:n]) wait(2)\n        #pragma acc update host(g[0:n]) wait(3)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        avg += a[x]/(n * 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            real_t avg = 0.0;\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    avg = 0.0;\n    for (int x = 0; x < n; ++x){\n        avg += a[x]/n;\n    }\n\n    if (avg < 1000 || avg > 1600){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "reference_count_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_function_identifier_unnamed(a[x], n) + b[x]) > PRECISION)){\n            err += 1;\n            return 1;\n        }\n        else if ((on_host) && (fabs(host_function_identifier_unnamed(a[x], n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_unnamed(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_unnamed(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_identifier_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_identifier_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_bind_nonprototype_function_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_function_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_nonprototype_lambda_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_function_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_nonstring_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_nonstring_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_string_function.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind_prototype_lambda_string_lambda.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n       \ta[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_array_array(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_array(a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_array(a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n    free(a);\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n\n    if(failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_object_array(&a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_array(&a, n) + b[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_array(&a, n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(b);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b, b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_array_object(a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_array_object(a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_array_object(a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    free(a);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(SEED);\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    int on_host = (acc_get_device_type() == acc_device_none);\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a, a.data[0:n], b ,b.data[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b.data[x] = device_object_object(&a, n);\n            }\n        }\n\t#pragma acc update host(b.data[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_object_object(&a, n) + b.data[x]) > PRECISION)){\n            err += 1;\n        }\n        else if ((on_host) && (fabs(host_object_object(&a, n) - b.data[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test4();\n    }\n\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_gang.c": {
                "num tests": 10,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x)\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_gang_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "10": {
                        "content": "#ifndef T10\n//T10:routine,construct-independent,V:2.0-2.7\nint test10(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T10\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test10();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 9);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "9": {
                        "content": "#ifndef T9\n//T9:routine,construct-independent,V:2.0-2.7\nint test9(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T9\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test9();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 8);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_nohost.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t summation;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                b[x] = function(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        summation = 0;\n        for (int y = 0; y < n; ++y){\n            summation += a[x][y];\n        }\n        if (fabs(summation - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_seq.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_seq_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_vector.c": {
                "num tests": 6,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_vector_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_worker.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_worker_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc serial async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc serial async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc serial wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc serial copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc serial copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc serial copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 2;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,data,data-region,reference-counting,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n        #pragma acc serial create(zero: b[0:n]) copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default-mapping,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,default-mapping,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc serial default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc serial deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 10; ++y){\n            if (fabs(d[x * 10 + y] - (a[x * 10 + y] + b[x * 10 + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,firstprivate,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    c[y] = a[x * 10 + y] - b[x * 10 + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,if,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc serial if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,if,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,if,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy cluase test with serial default(none) and reduction with scalar variables\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial default(none) reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += (1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with serial loop and reduction with scalar\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial loop reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += (1 << 1);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only serial and reduction with scalar variables\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host = rand()/(real_t)(RAND_MAX/10);\n\tint device = host;\n\t#pragma acc serial reduction(+:device)\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice += device;\n\t}\n\n\tif( fabs(host - device) > PRECISION ){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += (1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *) malloc ( n *sizeof(real_t));\n        real_t *device_array = (real_t *) malloc ( n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n                host_array[x] = rand()/ (real_t)(RAND_MAX/10);\n                device_array[x] = host_array[x];\n        }\n\t\n\t#pragma acc serial loop\n\tfor ( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\t\n\tfor( int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n                        err = 1;\n                }\n        }\n        free(host_array);\n        free(device_array);\n        return err;\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += (1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "serial_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc serial loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,async,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,auto,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 0; x < n; ++x){\n        b[x] = a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(b[x] - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 1; x < n; ++x){\n        a[x] = a[x - 1] + a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      rolling_total += a_copy[x];\n      if (fabs(rolling_total - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    char temp = 1;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc serial\n\t{   \n\t\t#pragma acc loop gang private(temp)\n        \tfor (int y = 0; y < 10; ++y){\n            \t\ttemp = a[y * n];\n            \t\t#pragma acc loop worker reduction(&:temp)\n           \t\tfor (int x = 1; x < n; ++x){\n               \t\ttemp = temp & a[y * n + x];\n            \t\t}\n            \t\n\t\t\tc[y] = temp;\n            \t\n\t\t\t#pragma acc loop worker\n            \t\tfor (int x = 0; x < n; ++x){\n\t       \t\t\tb[y * n + x] = b[y * n + x] + c[y];\n            \t\t}\n        \t}\n    \t}\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n    unsigned int c = 0;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int host_c;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int host_b;\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc serial loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc serial loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc serial loop reduction (*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc serial \n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    {\n        #pragma acc serial \n\t{\n\t#pragma loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc serial loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,tile,combined-constructs,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "tile",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,tile,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc serial loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc serial\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc serial\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err + 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,present,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc serial present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "present"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,private,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc serial private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc serial copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,default-mapping,serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "default-mapping",
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    real_t tempc = 0.0;\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,executable-data,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc serial present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "executable-data",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int y = 0; y < 10; ++y){\n        avg = 0.0;\n        for (int x = 0; x < n; ++x){\n            avg += a[y * n + x]/n;\n        }\n\n        if (avg < 1000 || avg > 1500){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,set,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc set default_async(1)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc set default_async(2)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "set",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,devonly,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            #pragma acc set device_num(x)\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "devonly",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(host)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(multicore)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:set,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(default)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n\tint err = 0;\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc set device_type(host) device_num(device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(multicore) device_num(device_num)\n\n        return err;\t\n}\n#endif\n#ifndef T2\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test2();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 1);\n    \t}\n#endif \n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic",
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test3(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(default) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T3\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test3();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 2);\n    \t}\n#endif \n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "set_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n        int err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(nvidia) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(nvidia)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_type = acc_get_device_type();\n\n\t#pragma acc set if(acc_get_device_type == device_type)\n\n\treturn err;\t\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n        srand(SEED);\n        int device_type = acc_get_device_type();\n\n        #pragma acc set if(acc_get_device_type != device_type)\n\n        return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc shutdown\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:shutdown,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:shutdown,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(host) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:shutdown,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(multicore) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:shutdown,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(default) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num == device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num != device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed = failed + test2();\n        }\n        if (failed != 0){\n                failcode = failcode + (1 << 1);\n        }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "wait_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tc[x] = a[x] + b[x];\n\t    }\n\t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(true)\n    }\n    \n    for (int x = 0; x < n; ++x){\n\tif (abs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n\tif (abs(f[x] - (d[x] + e[x])) > PRECISION){\n\t    err++;\n\t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(true)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test2();\n    }\n    if (failed){\n\tfailcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    \n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t        c[x] = a[x] + b[x];\n\t    }\n \t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(false)\n    }\n        \n    for (int x = 0; x < n; ++x){\n\tif (c[x] > PRECISION){\n\t    err++;\n\t}\n\tif (f[x] > PRECISION){\n\t    err++\n\t}\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(false)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if (failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_devnum_false.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n    \t#pragma acc update host(c.data[0:n]) wait(1) if(false)\n\t#pragma acc update host(f.data[0:n]) wait(2) if(false)\n\t#pragma acc update host(g.data[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c.data[x] > PRECISION){\n            err++;\n        }\n        if (f.data[x] > PRECISION){\n\t    err++;\n\t}\n        if (g.data[x] > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(false)\n        #pragma acc update host(f[0:n]) wait(2) if(false)\n        #pragma acc update host(g[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c[x] > PRECISION){\n\t    err++;\n\t}\n        if(f[x] > PRECISION){\n            err++;\n        }\n        if(g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n]) wait(1) if(false)\n        #pragma acc update host(f.data[0:n]) wait(2) if(false)\n        #pragma acc update host(g.data[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c.data[x] > PRECISION){\n            err++;\n        }\n        if(f.data[x] > PRECISION){\n            err++;\n        }\n        if(g.data[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(false)\n        #pragma acc update host(f[0:n]) wait(2) if(false)\n        #pragma acc update host(g[0:n]) wait(3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++;\n        }\n        if (g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_devnum_true.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n    \t#pragma acc update host(c.data[0:n]) wait(1) if(true)\n\t#pragma acc update host(f.data[0:n]) wait(2) if(true)\n\t#pragma acc update host(g.data[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c.data[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f.data[x] - (d.data[x] + e.data[x])) > PRECISION){\n\t    err++;\n\t}\n        if (abs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(true)\n        #pragma acc update host(f[0:n]) wait(2) if(true)\n        #pragma acc update host(g[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n]) wait(1) if(true)\n        #pragma acc update host(f.data[0:n]) wait(2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c.data[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f.data[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1) if(true)\n        #pragma acc update host(f[0:n]) wait(2) if(true)\n        #pragma acc update host(g[0:n]) wait(3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f[x] - (d.data[x] + e.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_queue_false.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n    \n\t#pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(false)\n\t#pragma acc update host(g.data[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c.data[x] > PRECISION){\n            err++;\n        }\n        if (f.data[x] > PRECISION){\n\t    err++;\n\t}\n        if (g.data[x] > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c[x] > PRECISION){\n\t    err++;\n\t}\n        if(f[x] > PRECISION){\n            err++;\n        }\n        if(g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n\n        #pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(c.data[x] > PRECISION){\n            err++;\n        }\n        if(f.data[x] > PRECISION){\n            err++;\n        }\n        if(g.data[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(false)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++;\n        }\n        if (g[x] > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "wait_if_queue_true.cpp": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc.data[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf.data[x] = 0.0;\n\tg.data[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a,a.data[0:n], b, b.data[0:n], c, c.data[0:n], d, d.data[0:n], e, e.data[0:n], f, f.data[0:n],g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = a.data[x] + b.data[x];\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = d.data[x] + e.data[x];\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = c.data[x] + f.data[x];\n        }\n\n\t#pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c.data[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f.data[x] - (d.data[x] + e.data[x])) > PRECISION){\n\t    err++;\n\t}\n        if (abs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n      \t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> c = *(new data_container<real_t>(n));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> f = *(new data_container<real_t>(n));\n    data_container<real_t> g = *(new data_container<real_t>(n));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c.data[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f.data[x] = 0.0;\n        g.data[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c, c.data[0:n], d[0:n], e[0:n], f, f.data[0:n], g, g.data[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c.data[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f.data[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g.data[x] = (c.data[x] + f.data[x]);\n        }\n        #pragma acc update host(c.data[0:n], f.data[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g.data[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c.data[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f.data[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g.data[x] - (c.data[x] + f.data[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(d);\n    free(e);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if(failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n\n    data_container<real_t> a = *(new data_container<real_t>(n));\n    data_container<real_t> b = *(new data_container<real_t>(n));\n    real_t * c  = (real_t *)malloc(n * sizeof(real_t));\n    data_container<real_t> d = *(new data_container<real_t>(n));\n    data_container<real_t> e = *(new data_container<real_t>(n));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        b.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        e.data[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a,a.data[0:n],b,b.data[0:n],c[0:n],d,d.data[0:n],e,e.data[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a.data[x] + b.data[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d.data[x] + e.data[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1,2) if(true)\n        #pragma acc update host(g[0:n]) wait(1,2,3) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a.data[x] + b.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(f[x] - (d.data[x] + e.data[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(c);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if(failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}